using ArchUnitNET.TUnit;
using BookWorm.ArchTests.Abstractions;
using static ArchUnitNET.Fluent.ArchRuleDefinition;

namespace BookWorm.ArchTests.Dependencies;

public sealed class CyclicDependencyTests : ArchUnitBaseTest
{
    [Test]
    public void GivenBasketService_WhenCheckingDependencies_ThenShouldNotDependOnOtherServices()
    {
        Types()
            .That()
            .Are(BasketServiceTypes)
            .Should()
            .NotDependOnAnyTypesThat()
            .Are(CatalogServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(ChatServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(FinanceServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(NotificationServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(OrderingServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(RatingServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(SchedulerServiceTypes)
            .Because("Services should be independent and not directly depend on each other.")
            .Check(Architecture);
    }

    [Test]
    public void GivenCatalogService_WhenCheckingDependencies_ThenShouldNotDependOnOtherServices()
    {
        Types()
            .That()
            .Are(CatalogServiceTypes)
            .Should()
            .NotDependOnAnyTypesThat()
            .Are(BasketServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(ChatServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(FinanceServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(NotificationServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(OrderingServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(RatingServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(SchedulerServiceTypes)
            .Because("Services should be independent and not directly depend on each other.")
            .Check(Architecture);
    }

    [Test]
    public void GivenChatService_WhenCheckingDependencies_ThenShouldNotDependOnOtherServices()
    {
        Types()
            .That()
            .Are(ChatServiceTypes)
            .Should()
            .NotDependOnAnyTypesThat()
            .Are(BasketServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(CatalogServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(FinanceServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(NotificationServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(OrderingServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(RatingServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(SchedulerServiceTypes)
            .Because("Services should be independent and not directly depend on each other.")
            .Check(Architecture);
    }

    [Test]
    public void GivenFinanceService_WhenCheckingDependencies_ThenShouldNotDependOnOtherServices()
    {
        Types()
            .That()
            .Are(FinanceServiceTypes)
            .Should()
            .NotDependOnAnyTypesThat()
            .Are(BasketServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(CatalogServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(ChatServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(NotificationServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(OrderingServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(RatingServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(SchedulerServiceTypes)
            .Because("Services should be independent and not directly depend on each other.")
            .Check(Architecture);
    }

    [Test]
    public void GivenNotificationService_WhenCheckingDependencies_ThenShouldNotDependOnOtherServices()
    {
        Types()
            .That()
            .Are(NotificationServiceTypes)
            .Should()
            .NotDependOnAnyTypesThat()
            .Are(BasketServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(CatalogServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(ChatServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(FinanceServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(OrderingServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(RatingServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(SchedulerServiceTypes)
            .Because("Services should be independent and not directly depend on each other.")
            .Check(Architecture);
    }

    [Test]
    public void GivenOrderingService_WhenCheckingDependencies_ThenShouldNotDependOnOtherServices()
    {
        Types()
            .That()
            .Are(OrderingServiceTypes)
            .Should()
            .NotDependOnAnyTypesThat()
            .Are(BasketServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(CatalogServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(ChatServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(FinanceServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(NotificationServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(RatingServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(SchedulerServiceTypes)
            .Because("Services should be independent and not directly depend on each other.")
            .Check(Architecture);
    }

    [Test]
    public void GivenRatingService_WhenCheckingDependencies_ThenShouldNotDependOnOtherServices()
    {
        Types()
            .That()
            .Are(RatingServiceTypes)
            .Should()
            .NotDependOnAnyTypesThat()
            .Are(BasketServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(CatalogServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(ChatServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(FinanceServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(NotificationServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(OrderingServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(SchedulerServiceTypes)
            .Because("Services should be independent and not directly depend on each other.")
            .Check(Architecture);
    }

    [Test]
    public void GivenSchedulerService_WhenCheckingDependencies_ThenShouldNotDependOnOtherServices()
    {
        Types()
            .That()
            .Are(SchedulerServiceTypes)
            .Should()
            .NotDependOnAnyTypesThat()
            .Are(BasketServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(CatalogServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(ChatServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(FinanceServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(NotificationServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(OrderingServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(RatingServiceTypes)
            .Because("Services should be independent and not directly depend on each other.")
            .Check(Architecture);
    }

    [Test]
    public void GivenBuildingBlocks_WhenCheckingDependencies_ThenShouldNotDependOnServices()
    {
        Types()
            .That()
            .Are(ChassisServiceTypes)
            .Should()
            .NotDependOnAnyTypesThat()
            .Are(BasketServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(CatalogServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(ChatServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(FinanceServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(NotificationServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(OrderingServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(RatingServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(SchedulerServiceTypes)
            .Because("Building blocks should be independent and not depend on specific services.")
            .Check(Architecture);
    }

    [Test]
    public void GivenConstants_WhenCheckingDependencies_ThenShouldNotDependOnServices()
    {
        Types()
            .That()
            .Are(ConstantsServiceTypes)
            .Should()
            .NotDependOnAnyTypesThat()
            .Are(BasketServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(CatalogServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(ChatServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(FinanceServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(NotificationServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(OrderingServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(RatingServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(SchedulerServiceTypes)
            .Because("Constants should be independent and not depend on specific services.")
            .Check(Architecture);
    }

    [Test]
    public void GivenSharedKernel_WhenCheckingDependencies_ThenShouldNotDependOnServices()
    {
        Types()
            .That()
            .Are(SharedKernelServiceTypes)
            .Should()
            .NotDependOnAnyTypesThat()
            .Are(BasketServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(CatalogServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(ChatServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(FinanceServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(NotificationServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(OrderingServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(RatingServiceTypes)
            .OrShould()
            .NotDependOnAnyTypesThat()
            .Are(SchedulerServiceTypes)
            .Because("Shared kernel should be independent and not depend on specific services.")
            .Check(Architecture);
    }
}
