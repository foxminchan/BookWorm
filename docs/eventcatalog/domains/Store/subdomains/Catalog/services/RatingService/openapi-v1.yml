---
openapi: 3.1.1
info:
  title: Rating Service API
  description:
    Handles the collection, storage, and aggregation of user feedback and
    ratings for books on the BookWorm platform
  contact:
    name: Nhan Nguyen
    url: https://github.com/foxminchan
    email: nguyenxuannhan407@gmail.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: "1.0"
externalDocs:
  description: Documentation
  url: https://github.com/foxminchan/BookWorm
servers:
  - url: "{protocol}://{environment}.rating.bookworm.com"
    description: Non-production environment
    variables:
      protocol:
        enum:
          - https
          - http
        default: https
      environment:
        enum:
          - dev
          - stg
          - qa
        default: dev
  - url: "{protocol}://rating.bookworm.com"
    description: Production environment
    variables:
      protocol:
        enum:
          - https
        default: https
security:
  - OAuth:
      - rating_read
      - rating_write
paths:
  "/api/v1/feedbacks/visualize":
    get:
      tags:
        - Rating
      summary: Visualizer Workflow
      description: Get the workflow for the visualizer
      x-eventcatalog-message-type: query
      operationId: VisualizeWorkflowEndpoint
      security:
        - OAuth:
            - rating_read
            - rating_write
      parameters:
        - name: Type
          in: query
          description: The type of visualization to generate
          schema:
            $ref: "#/components/schemas/Visualizations"
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
                description: The workflow in the specified visualization format
              example: |
                flowchart TD
                  HandoffStart["HandoffStart (Start)"];
                  language["language"];
                  summarize["summarize"];
                  HandoffEnd["HandoffEnd"];
                  rating["rating"];

                  HandoffStart --> language;
                  language --> summarize;
                  language --> HandoffEnd;
                  summarize --> rating;
                  summarize --> HandoffEnd;
                  rating --> language;
                  rating --> HandoffEnd;
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                "$ref": "#/components/schemas/HttpValidationProblemDetails"
              examples:
                invalid-type:
                  summary: "Invalid visualization type"
                  value:
                    type: "https://tools.ietf.org/html/rfc9110#section-15.5.1"
                    title: "Validation failed"
                    status: 400
                    detail: "One or more validation errors has occurred"
                    errors:
                      - propertyName: "'Type'"
                        errorMessage: "'Type' has a range of values which does not include '4'."
                        attemptedValue: null
                        customState: null
                        severity: 0
                        errorCode: null
                        formattedMessagePlaceholderValues: null
        "401":
          description: Unauthorized - Access token is missing or invalid.
        "403":
          description: Forbidden - Access token does not have the required permissions.
  "/api/v1/feedbacks":
    get:
      tags:
        - Feedback
      summary: List Feedbacks
      description: List feedbacks for a book with pagination and filtering
      x-eventcatalog-message-type: query
      operationId: ListFeedbacksEndpoint
      parameters:
        - name: BookId
          in: query
          description: The ID of the book to get feedback for
          required: true
          schema:
            type: string
            format: uuid
            description: The unique identifier of the book
            example: "01961eb4-668d-7e7e-ae25-0fab379614f7"
        - name: PageIndex
          in: query
          description: Number of items to return in a single page of results
          schema:
            type: integer
            format: int32
            default: 1
            description: The page index to return
            minimum: 1
            example: 1
        - name: PageSize
          in: query
          description: Number of items to return in a single page of results
          schema:
            type: integer
            format: int32
            default: 20
            description: The page size to return
            minimum: 1
            example: 20
        - name: OrderBy
          in: query
          description: Property to order results by
          schema:
            type: string
            default: Rating
            description: The property to order results by
            example: Rating
        - name: IsDescending
          in: query
          description: Whether to order results in descending order
          schema:
            type: boolean
            default: false
            description: Whether to order results in descending order
            example: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PagedResultOfFeedbackDto"
              examples:
                feedbacks-empty:
                  summary: No feedbacks found
                  value:
                    items: []
                    pageIndex: 1
                    pageSize: 20
                    totalItems: 0
                    totalPages: 0
                    hasPreviousPage: false
                    hasNextPage: false
                feedbacks-single:
                  summary: Single feedback
                  value:
                    items:
                      - id: "01961eb4-668d-7e7e-ae25-0fab379614f7"
                        firstName: "John"
                        lastName: "Doe"
                        comment: "This is a comment"
                        rating: 5
                        bookId: "01961eb4-668d-7e7e-ae25-0fab379614f7"
                    pageIndex: 1
                    pageSize: 20
                    totalItems: 1
                    totalPages: 1
                    hasPreviousPage: false
                    hasNextPage: false
                feedbacks-multiple:
                  summary: Multiple feedbacks
                  value:
                    items:
                      - id: "01961eb4-668d-7e7e-ae25-0fab379614f7"
                        firstName: "John"
                        lastName: "Doe"
                        comment: "This is a comment"
                        rating: 5
                        bookId: "01961eb4-668d-7e7e-ae25-0fab379614f7"
                      - id: "01961eb4-668d-7e7e-ae25-0fab379614f8"
                        firstName: "Jane"
                        lastName: "Doe"
                        comment: "This is another comment"
                        rating: 4
                        bookId: "01961eb4-668d-7e7e-ae25-0fab379614f7"
                    pageIndex: 1
                    pageSize: 20
                    totalItems: 2
                    totalPages: 1
                    hasPreviousPage: false
                    hasNextPage: false
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                "$ref": "#/components/schemas/HttpValidationProblemDetails"
              examples:
                invalid-page-index:
                  summary: Invalid page index
                  value:
                    type: "https://tools.ietf.org/html/rfc9110#section-15.5.1"
                    title: "Validation failed"
                    status: 400
                    detail: "One or more validation errors has occurred"
                    errors:
                      - propertyName: "'PageIndex'"
                        errorMessage: "'PageIndex' must be greater than 0."
                        attemptedValue: null
                        customState: null
                        severity: 0
                        errorCode: null
                        formattedMessagePlaceholderValues: null
                invalid-page-size:
                  summary: Invalid page size
                  value:
                    type: "https://tools.ietf.org/html/rfc9110#section-15.5.1"
                    title: "Validation failed"
                    status: 400
                    detail: "One or more validation errors has occurred"
                    errors:
                      - propertyName: "'PageSize'"
                        errorMessage: "'PageSize' must be greater than 0."
                        attemptedValue: null
                        customState: null
                        severity: 0
                        errorCode: null
                        formattedMessagePlaceholderValues: null
    post:
      tags:
        - Feedback
      summary: Create Feedback
      description: Create a new feedback
      x-eventcatalog-message-type: command
      security:
        - OAuth:
            - rating_read
            - rating_write
      operationId: CreateFeedbackEndpoint
      requestBody:
        description: The command to create a new feedback
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateFeedbackCommand"
            example:
              bookId: "02f1e2d3-4567-890a-bcde-f1234567890a"
              firstName: "John"
              lastName: "Doe"
              comment: "This is a comment"
              rating: 5
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
                format: uuid
                description: The unique identifier of the feedback
                example: "01961eb4-668d-7e7e-ae25-0fab379614f7"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                "$ref": "#/components/schemas/HttpValidationProblemDetails"
              examples:
                empty-book-id:
                  summary: Empty book ID
                  value:
                    type: "https://tools.ietf.org/html/rfc9110#section-15.5.1"
                    title: "Validation failed"
                    status: 400
                    detail: "One or more validation errors has occurred"
                    errors:
                      - propertyName: "'BookId'"
                        errorMessage: "'BookId' must not be empty."
                        attemptedValue: null
                        customState: null
                        severity: 0
                        errorCode: null
                        formattedMessagePlaceholderValues: null
                empty-first-name:
                  summary: Empty first name
                  value:
                    type: "https://tools.ietf.org/html/rfc9110#section-15.5.1"
                    title: "Validation failed"
                    status: 400
                    detail: "One or more validation errors has occurred"
                    errors:
                      - propertyName: "'FirstName'"
                        errorMessage: "'FirstName' must not be empty."
                        attemptedValue: null
                        customState: null
                        severity: 0
                        errorCode: null
                        formattedMessagePlaceholderValues: null
                empty-last-name:
                  summary: Empty last name
                  value:
                    type: "https://tools.ietf.org/html/rfc9110#section-15.5.1"
                    title: "Validation failed"
                    status: 400
                    detail: "One or more validation errors has occurred"
                    errors:
                      - propertyName: "'LastName'"
                        errorMessage: "'LastName' must not be empty."
                        attemptedValue: null
                        customState: null
                        severity: 0
                        errorCode: null
                        formattedMessagePlaceholderValues: null
  "/api/v1/feedbacks/{id}/summarize":
    get:
      tags:
        - Feedback
      summary: Summarize Feedback
      description: Summarize the feedback for a book by its ID
      x-eventcatalog-message-type: query
      operationId: SummarizeFeedbackEndpoint
      security:
        - OAuth:
            - rating_read
            - rating_write
      parameters:
        - name: id
          in: path
          description: The unique identifier of the book to be summarized
          required: true
          schema:
            type: string
            format: uuid
            description: The unique identifier of the book
            example: "01961eb4-668d-7e7e-ae25-0fab379614f7"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SummarizeResult"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
  "/api/v1/feedbacks/{id}":
    delete:
      tags:
        - Feedback
      summary: Delete Feedback
      description: Delete a feedback if it exists
      x-eventcatalog-message-type: command
      operationId: DeleteFeedbackEndpoint
      security:
        - OAuth:
            - rating_read
            - rating_write
      parameters:
        - name: id
          in: path
          description: The unique identifier of the feedback to be deleted
          required: true
          schema:
            type: string
            format: uuid
            description: The unique identifier of the feedback to be deleted
            example: "01961eb4-668d-7e7e-ae25-0fab379614f7"
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized - Access token is missing or invalid.
        "403":
          description: Forbidden - The permission requirements are not met.
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
              examples:
                feedback-not-found:
                  summary: Feedback not found
                  value:
                    type: "https://tools.ietf.org/html/rfc9110#section-15.5.1"
                    title: "Not found"
                    status: 404
                    detail: "Feedback with id 01961eb4-668d-7e7e-ae25-0fab379614f7 not found."
components:
  schemas:
    CreateFeedbackCommand:
      required:
        - bookId
        - firstName
        - lastName
        - rating
      type: object
      writeOnly: true
      description: The command to create a new feedback
      example:
        bookId: "01961eb4-668d-7e7e-ae25-0fab379614f7"
        firstName: "John"
        lastName: "Doe"
        comment: "This is a comment"
        rating: 5
      properties:
        bookId:
          type: string
          format: uuid
          description: The unique identifier of the book
          example: "01961eb4-668d-7e7e-ae25-0fab379614f7"
        firstName:
          type:
            - "string"
            - "null"
          description: The first name of the user
          maxLength: 50
          example: "John"
        lastName:
          type: string
          description: The last name of the user
          maxLength: 50
          example: "Doe"
        comment:
          type:
            - "string"
            - "null"
          description: The comment of the user
          maxLength: 1000
          example: "This is a comment"
        rating:
          type: integer
          format: int32
          description: The rating of the user
          minimum: 1
          maximum: 5
          example: 5
    FeedbackDto:
      type: object
      readOnly: true
      description: The feedback of the user
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier of the feedback
          example: "01961eb4-668d-7e7e-ae25-0fab379614f7"
        firstName:
          type: string
          description: The first name of the user
          example: "John"
        lastName:
          type: string
          description: The last name of the user
          example: "Doe"
        comment:
          type:
            - "string"
            - "null"
          description: The comment of the user
          example: "This is a comment"
        rating:
          type: integer
          format: int32
          description: The rating of the user
          example: 5
        bookId:
          type: string
          format: uuid
          description: The unique identifier of the book
          example: "01961eb4-668d-7e7e-ae25-0fab379614f7"
    HttpValidationProblemDetails:
      type: object
      readOnly: true
      x-scalar-ignore: true
      description: RFC 9110 (https://tools.ietf.org/html/rfc9110#section-15.5.1)
      properties:
        type:
          type:
            - "null"
            - string
          description: The type of the problem
          example: "https://tools.ietf.org/html/rfc9110#section-15.5.1"
        title:
          type:
            - "null"
            - string
          description: The title of the problem
          example: "Validation failed"
        status:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
            - "null"
            - integer
            - string
          format: int32
          description: The status code of the problem
          example: 400
        detail:
          type:
            - "null"
            - string
          description: The detail of the problem
          example: "One or more validation errors has occurred"
        instance:
          type:
            - "null"
            - string
          format: uri
          description: The instance of the problem
          example: "/api/v1/feedbacks"
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          description: The validation errors
          example:
            propertyName: "'Name'"
            errorMessage: "'Name' must not be empty."
            attemptedValue: null
            customState: null
            severity: 0
            errorCode: null
            formattedMessagePlaceholderValues: null
    PagedResultOfFeedbackDto:
      type: object
      readOnly: true
      description: The paged result of the feedback
      properties:
        items:
          type: array
          items:
            "$ref": "#/components/schemas/FeedbackDto"
        pageIndex:
          type: integer
          format: int32
          description: The page index
          example: 1
        pageSize:
          type: integer
          format: int32
          description: The page size
          example: 20
        totalItems:
          type: integer
          format: int64
          description: The total number of items
          example: 100
        totalPages:
          type: number
          format: double
          description: The total number of pages
          example: 5
        hasPreviousPage:
          type: boolean
          description: Whether there is a previous page
          example: true
        hasNextPage:
          type: boolean
          description: Whether there is a next page
          example: true
    ProblemDetails:
      type: object
      readOnly: true
      x-scalar-ignore: true
      description: RFC 9110 (https://tools.ietf.org/html/rfc9110)
      properties:
        type:
          type:
            - "null"
            - string
          description: The type of the problem
          example: "https://tools.ietf.org/html/rfc9110#section-15.5.5"
        title:
          type:
            - "null"
            - string
          description: The title of the problem
          example: "Not found"
        status:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
            - "null"
            - integer
            - string
          format: int32
          description: The status code of the problem
          example: 404
        detail:
          type:
            - "null"
            - string
          description: The detail of the problem
          example: "Feedback with id 01961eb4-668d-7e7e-ae25-0fab379614f7 was not found."
        instance:
          type:
            - "null"
            - string
          format: uri
          description: The instance of the problem
          example: "/api/v1/feedbacks/01961eb4-668d-7e7e-ae25-0fab379614f7"
    Visualizations:
      enum:
        - Mermaid
        - Dot
      default: Mermaid
  securitySchemes:
    OAuth:
      type: oauth2
      description: OAuth2 security scheme for the BookWorm API
      flows:
        authorizationCode:
          authorizationUrl: "https://auth.bookworm.com/realms/bookworm/protocol/openid-connect/auth"
          tokenUrl: "https://auth.bookworm.com/realms/bookworm/protocol/openid-connect/token"
          scopes:
            rating_read: Read for Rating API
            rating_write: Write for Rating API
          x-usePkce: "SHA-256"
          x-scalar-client-id: "rating"
          x-scalar-security-body:
            audience: "account"
tags:
  - name: Feedback
    description: Endpoints for managing user ratings and feedback for books on the BookWorm platform
