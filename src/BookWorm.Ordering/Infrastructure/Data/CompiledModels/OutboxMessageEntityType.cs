// <auto-generated />
using System;
using System.Reflection;
using MassTransit.EntityFrameworkCoreIntegration;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Json;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping;

#pragma warning disable 219, 612, 618
#nullable disable

namespace BookWorm.Ordering.Infrastructure.Data.CompiledModels
{
    internal partial class OutboxMessageEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "MassTransit.EntityFrameworkCoreIntegration.OutboxMessage",
                typeof(OutboxMessage),
                baseEntityType);

            var sequenceNumber = runtimeEntityType.AddProperty(
                "SequenceNumber",
                typeof(long),
                propertyInfo: typeof(OutboxMessage).GetProperty("SequenceNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutboxMessage).GetField("<SequenceNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            sequenceNumber.TypeMapping = LongTypeMapping.Default.Clone(
                comparer: new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => v.GetHashCode(),
                    (long v) => v),
                keyComparer: new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => v.GetHashCode(),
                    (long v) => v),
                providerValueComparer: new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => v.GetHashCode(),
                    (long v) => v));
            sequenceNumber.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            sequenceNumber.AddAnnotation("Relational:ColumnName", "sequence_number");

            var body = runtimeEntityType.AddProperty(
                "Body",
                typeof(string),
                propertyInfo: typeof(OutboxMessage).GetProperty("Body", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutboxMessage).GetField("<Body>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            body.TypeMapping = StringTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    dbType: System.Data.DbType.String));
            body.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
            body.AddAnnotation("Relational:ColumnName", "body");

            var contentType = runtimeEntityType.AddProperty(
                "ContentType",
                typeof(string),
                propertyInfo: typeof(OutboxMessage).GetProperty("ContentType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutboxMessage).GetField("<ContentType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 256);
            contentType.TypeMapping = NpgsqlStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "character varying(256)",
                    size: 256));
            contentType.TypeMapping = ((NpgsqlStringTypeMapping)contentType.TypeMapping).Clone(npgsqlDbType: NpgsqlTypes.NpgsqlDbType.Varchar);
        contentType.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
        contentType.AddAnnotation("Relational:ColumnName", "content_type");

        var conversationId = runtimeEntityType.AddProperty(
            "ConversationId",
            typeof(Guid?),
            propertyInfo: typeof(OutboxMessage).GetProperty("ConversationId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            fieldInfo: typeof(OutboxMessage).GetField("<ConversationId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            nullable: true);
        conversationId.TypeMapping = GuidTypeMapping.Default.Clone(
            comparer: new ValueComparer<Guid?>(
                (Nullable<Guid> v1, Nullable<Guid> v2) => v1.HasValue && v2.HasValue && (Guid)v1 == (Guid)v2 || !v1.HasValue && !v2.HasValue,
                (Nullable<Guid> v) => v.HasValue ? ((Guid)v).GetHashCode() : 0,
                (Nullable<Guid> v) => v.HasValue ? (Nullable<Guid>)(Guid)v : default(Nullable<Guid>)),
            keyComparer: new ValueComparer<Guid?>(
                (Nullable<Guid> v1, Nullable<Guid> v2) => v1.HasValue && v2.HasValue && (Guid)v1 == (Guid)v2 || !v1.HasValue && !v2.HasValue,
                (Nullable<Guid> v) => v.HasValue ? ((Guid)v).GetHashCode() : 0,
                (Nullable<Guid> v) => v.HasValue ? (Nullable<Guid>)(Guid)v : default(Nullable<Guid>)),
            providerValueComparer: new ValueComparer<Guid?>(
                (Nullable<Guid> v1, Nullable<Guid> v2) => v1.HasValue && v2.HasValue && (Guid)v1 == (Guid)v2 || !v1.HasValue && !v2.HasValue,
                (Nullable<Guid> v) => v.HasValue ? ((Guid)v).GetHashCode() : 0,
                (Nullable<Guid> v) => v.HasValue ? (Nullable<Guid>)(Guid)v : default(Nullable<Guid>)),
            mappingInfo: new RelationalTypeMappingInfo(
                storeTypeName: "uuid"));
        conversationId.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
        conversationId.AddAnnotation("Relational:ColumnName", "conversation_id");

        var correlationId = runtimeEntityType.AddProperty(
            "CorrelationId",
            typeof(Guid?),
            propertyInfo: typeof(OutboxMessage).GetProperty("CorrelationId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            fieldInfo: typeof(OutboxMessage).GetField("<CorrelationId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            nullable: true);
        correlationId.TypeMapping = GuidTypeMapping.Default.Clone(
            comparer: new ValueComparer<Guid?>(
                (Nullable<Guid> v1, Nullable<Guid> v2) => v1.HasValue && v2.HasValue && (Guid)v1 == (Guid)v2 || !v1.HasValue && !v2.HasValue,
                (Nullable<Guid> v) => v.HasValue ? ((Guid)v).GetHashCode() : 0,
                (Nullable<Guid> v) => v.HasValue ? (Nullable<Guid>)(Guid)v : default(Nullable<Guid>)),
            keyComparer: new ValueComparer<Guid?>(
                (Nullable<Guid> v1, Nullable<Guid> v2) => v1.HasValue && v2.HasValue && (Guid)v1 == (Guid)v2 || !v1.HasValue && !v2.HasValue,
                (Nullable<Guid> v) => v.HasValue ? ((Guid)v).GetHashCode() : 0,
                (Nullable<Guid> v) => v.HasValue ? (Nullable<Guid>)(Guid)v : default(Nullable<Guid>)),
            providerValueComparer: new ValueComparer<Guid?>(
                (Nullable<Guid> v1, Nullable<Guid> v2) => v1.HasValue && v2.HasValue && (Guid)v1 == (Guid)v2 || !v1.HasValue && !v2.HasValue,
                (Nullable<Guid> v) => v.HasValue ? ((Guid)v).GetHashCode() : 0,
                (Nullable<Guid> v) => v.HasValue ? (Nullable<Guid>)(Guid)v : default(Nullable<Guid>)),
            mappingInfo: new RelationalTypeMappingInfo(
                storeTypeName: "uuid"));
        correlationId.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
        correlationId.AddAnnotation("Relational:ColumnName", "correlation_id");

        var destinationAddress = runtimeEntityType.AddProperty(
            "DestinationAddress",
            typeof(Uri),
            propertyInfo: typeof(OutboxMessage).GetProperty("DestinationAddress", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            fieldInfo: typeof(OutboxMessage).GetField("<DestinationAddress>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            nullable: true,
            maxLength: 256);
        destinationAddress.TypeMapping = NpgsqlStringTypeMapping.Default.Clone(
            comparer: new ValueComparer<Uri>(
                (Uri v1, Uri v2) => v1 == v2,
                (Uri v) => v.GetHashCode(),
                (Uri v) => v),
            keyComparer: new ValueComparer<Uri>(
                (Uri v1, Uri v2) => v1 == v2,
                (Uri v) => v.GetHashCode(),
                (Uri v) => v),
            providerValueComparer: new ValueComparer<string>(
                (string v1, string v2) => v1 == v2,
                (string v) => v.GetHashCode(),
                (string v) => v),
            mappingInfo: new RelationalTypeMappingInfo(
                storeTypeName: "character varying(256)",
                size: 256),
            converter: new ValueConverter<Uri, string>(
                (Uri v) => v.ToString(),
                (string v) => new Uri(v, UriKind.RelativeOrAbsolute)),
            jsonValueReaderWriter: new JsonConvertedValueReaderWriter<Uri, string>(
                JsonStringReaderWriter.Instance,
                new ValueConverter<Uri, string>(
                    (Uri v) => v.ToString(),
                    (string v) => new Uri(v, UriKind.RelativeOrAbsolute))));
        destinationAddress.TypeMapping = ((NpgsqlStringTypeMapping)destinationAddress.TypeMapping).Clone(npgsqlDbType: NpgsqlTypes.NpgsqlDbType.Varchar);
    destinationAddress.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
    destinationAddress.AddAnnotation("Relational:ColumnName", "destination_address");

    var enqueueTime = runtimeEntityType.AddProperty(
        "EnqueueTime",
        typeof(DateTime?),
        propertyInfo: typeof(OutboxMessage).GetProperty("EnqueueTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        fieldInfo: typeof(OutboxMessage).GetField("<EnqueueTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        nullable: true);
    enqueueTime.TypeMapping = NpgsqlTimestampTzTypeMapping.Default.Clone(
        comparer: new ValueComparer<DateTime?>(
            (Nullable<DateTime> v1, Nullable<DateTime> v2) => v1.HasValue && v2.HasValue && (DateTime)v1 == (DateTime)v2 || !v1.HasValue && !v2.HasValue,
            (Nullable<DateTime> v) => v.HasValue ? ((DateTime)v).GetHashCode() : 0,
            (Nullable<DateTime> v) => v.HasValue ? (Nullable<DateTime>)(DateTime)v : default(Nullable<DateTime>)),
        keyComparer: new ValueComparer<DateTime?>(
            (Nullable<DateTime> v1, Nullable<DateTime> v2) => v1.HasValue && v2.HasValue && (DateTime)v1 == (DateTime)v2 || !v1.HasValue && !v2.HasValue,
            (Nullable<DateTime> v) => v.HasValue ? ((DateTime)v).GetHashCode() : 0,
            (Nullable<DateTime> v) => v.HasValue ? (Nullable<DateTime>)(DateTime)v : default(Nullable<DateTime>)),
        providerValueComparer: new ValueComparer<DateTime?>(
            (Nullable<DateTime> v1, Nullable<DateTime> v2) => v1.HasValue && v2.HasValue && (DateTime)v1 == (DateTime)v2 || !v1.HasValue && !v2.HasValue,
            (Nullable<DateTime> v) => v.HasValue ? ((DateTime)v).GetHashCode() : 0,
            (Nullable<DateTime> v) => v.HasValue ? (Nullable<DateTime>)(DateTime)v : default(Nullable<DateTime>)));
    enqueueTime.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
    enqueueTime.AddAnnotation("Relational:ColumnName", "enqueue_time");

    var expirationTime = runtimeEntityType.AddProperty(
        "ExpirationTime",
        typeof(DateTime?),
        propertyInfo: typeof(OutboxMessage).GetProperty("ExpirationTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        fieldInfo: typeof(OutboxMessage).GetField("<ExpirationTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        nullable: true);
    expirationTime.TypeMapping = NpgsqlTimestampTzTypeMapping.Default.Clone(
        comparer: new ValueComparer<DateTime?>(
            (Nullable<DateTime> v1, Nullable<DateTime> v2) => v1.HasValue && v2.HasValue && (DateTime)v1 == (DateTime)v2 || !v1.HasValue && !v2.HasValue,
            (Nullable<DateTime> v) => v.HasValue ? ((DateTime)v).GetHashCode() : 0,
            (Nullable<DateTime> v) => v.HasValue ? (Nullable<DateTime>)(DateTime)v : default(Nullable<DateTime>)),
        keyComparer: new ValueComparer<DateTime?>(
            (Nullable<DateTime> v1, Nullable<DateTime> v2) => v1.HasValue && v2.HasValue && (DateTime)v1 == (DateTime)v2 || !v1.HasValue && !v2.HasValue,
            (Nullable<DateTime> v) => v.HasValue ? ((DateTime)v).GetHashCode() : 0,
            (Nullable<DateTime> v) => v.HasValue ? (Nullable<DateTime>)(DateTime)v : default(Nullable<DateTime>)),
        providerValueComparer: new ValueComparer<DateTime?>(
            (Nullable<DateTime> v1, Nullable<DateTime> v2) => v1.HasValue && v2.HasValue && (DateTime)v1 == (DateTime)v2 || !v1.HasValue && !v2.HasValue,
            (Nullable<DateTime> v) => v.HasValue ? ((DateTime)v).GetHashCode() : 0,
            (Nullable<DateTime> v) => v.HasValue ? (Nullable<DateTime>)(DateTime)v : default(Nullable<DateTime>)));
    expirationTime.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
    expirationTime.AddAnnotation("Relational:ColumnName", "expiration_time");

    var faultAddress = runtimeEntityType.AddProperty(
        "FaultAddress",
        typeof(Uri),
        propertyInfo: typeof(OutboxMessage).GetProperty("FaultAddress", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        fieldInfo: typeof(OutboxMessage).GetField("<FaultAddress>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        nullable: true,
        maxLength: 256);
    faultAddress.TypeMapping = NpgsqlStringTypeMapping.Default.Clone(
        comparer: new ValueComparer<Uri>(
            (Uri v1, Uri v2) => v1 == v2,
            (Uri v) => v.GetHashCode(),
            (Uri v) => v),
        keyComparer: new ValueComparer<Uri>(
            (Uri v1, Uri v2) => v1 == v2,
            (Uri v) => v.GetHashCode(),
            (Uri v) => v),
        providerValueComparer: new ValueComparer<string>(
            (string v1, string v2) => v1 == v2,
            (string v) => v.GetHashCode(),
            (string v) => v),
        mappingInfo: new RelationalTypeMappingInfo(
            storeTypeName: "character varying(256)",
            size: 256),
        converter: new ValueConverter<Uri, string>(
            (Uri v) => v.ToString(),
            (string v) => new Uri(v, UriKind.RelativeOrAbsolute)),
        jsonValueReaderWriter: new JsonConvertedValueReaderWriter<Uri, string>(
            JsonStringReaderWriter.Instance,
            new ValueConverter<Uri, string>(
                (Uri v) => v.ToString(),
                (string v) => new Uri(v, UriKind.RelativeOrAbsolute))));
    faultAddress.TypeMapping = ((NpgsqlStringTypeMapping)faultAddress.TypeMapping).Clone(npgsqlDbType: NpgsqlTypes.NpgsqlDbType.Varchar);
faultAddress.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
faultAddress.AddAnnotation("Relational:ColumnName", "fault_address");

var headers = runtimeEntityType.AddProperty(
    "Headers",
    typeof(string),
    propertyInfo: typeof(OutboxMessage).GetProperty("Headers", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(OutboxMessage).GetField("<Headers>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    nullable: true);
headers.TypeMapping = StringTypeMapping.Default.Clone(
    comparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    keyComparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    providerValueComparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    mappingInfo: new RelationalTypeMappingInfo(
        dbType: System.Data.DbType.String));
headers.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
headers.AddAnnotation("Relational:ColumnName", "headers");

var inboxConsumerId = runtimeEntityType.AddProperty(
    "InboxConsumerId",
    typeof(Guid?),
    propertyInfo: typeof(OutboxMessage).GetProperty("InboxConsumerId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(OutboxMessage).GetField("<InboxConsumerId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    nullable: true);
inboxConsumerId.TypeMapping = GuidTypeMapping.Default.Clone(
    comparer: new ValueComparer<Guid?>(
        (Nullable<Guid> v1, Nullable<Guid> v2) => v1.HasValue && v2.HasValue && (Guid)v1 == (Guid)v2 || !v1.HasValue && !v2.HasValue,
        (Nullable<Guid> v) => v.HasValue ? ((Guid)v).GetHashCode() : 0,
        (Nullable<Guid> v) => v.HasValue ? (Nullable<Guid>)(Guid)v : default(Nullable<Guid>)),
    keyComparer: new ValueComparer<Guid?>(
        (Nullable<Guid> v1, Nullable<Guid> v2) => v1.HasValue && v2.HasValue && (Guid)v1 == (Guid)v2 || !v1.HasValue && !v2.HasValue,
        (Nullable<Guid> v) => v.HasValue ? ((Guid)v).GetHashCode() : 0,
        (Nullable<Guid> v) => v.HasValue ? (Nullable<Guid>)(Guid)v : default(Nullable<Guid>)),
    providerValueComparer: new ValueComparer<Guid?>(
        (Nullable<Guid> v1, Nullable<Guid> v2) => v1.HasValue && v2.HasValue && (Guid)v1 == (Guid)v2 || !v1.HasValue && !v2.HasValue,
        (Nullable<Guid> v) => v.HasValue ? ((Guid)v).GetHashCode() : 0,
        (Nullable<Guid> v) => v.HasValue ? (Nullable<Guid>)(Guid)v : default(Nullable<Guid>)),
    mappingInfo: new RelationalTypeMappingInfo(
        storeTypeName: "uuid"));
inboxConsumerId.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
inboxConsumerId.AddAnnotation("Relational:ColumnName", "inbox_consumer_id");

var inboxMessageId = runtimeEntityType.AddProperty(
    "InboxMessageId",
    typeof(Guid?),
    propertyInfo: typeof(OutboxMessage).GetProperty("InboxMessageId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(OutboxMessage).GetField("<InboxMessageId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    nullable: true);
inboxMessageId.TypeMapping = GuidTypeMapping.Default.Clone(
    comparer: new ValueComparer<Guid?>(
        (Nullable<Guid> v1, Nullable<Guid> v2) => v1.HasValue && v2.HasValue && (Guid)v1 == (Guid)v2 || !v1.HasValue && !v2.HasValue,
        (Nullable<Guid> v) => v.HasValue ? ((Guid)v).GetHashCode() : 0,
        (Nullable<Guid> v) => v.HasValue ? (Nullable<Guid>)(Guid)v : default(Nullable<Guid>)),
    keyComparer: new ValueComparer<Guid?>(
        (Nullable<Guid> v1, Nullable<Guid> v2) => v1.HasValue && v2.HasValue && (Guid)v1 == (Guid)v2 || !v1.HasValue && !v2.HasValue,
        (Nullable<Guid> v) => v.HasValue ? ((Guid)v).GetHashCode() : 0,
        (Nullable<Guid> v) => v.HasValue ? (Nullable<Guid>)(Guid)v : default(Nullable<Guid>)),
    providerValueComparer: new ValueComparer<Guid?>(
        (Nullable<Guid> v1, Nullable<Guid> v2) => v1.HasValue && v2.HasValue && (Guid)v1 == (Guid)v2 || !v1.HasValue && !v2.HasValue,
        (Nullable<Guid> v) => v.HasValue ? ((Guid)v).GetHashCode() : 0,
        (Nullable<Guid> v) => v.HasValue ? (Nullable<Guid>)(Guid)v : default(Nullable<Guid>)),
    mappingInfo: new RelationalTypeMappingInfo(
        storeTypeName: "uuid"));
inboxMessageId.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
inboxMessageId.AddAnnotation("Relational:ColumnName", "inbox_message_id");

var initiatorId = runtimeEntityType.AddProperty(
    "InitiatorId",
    typeof(Guid?),
    propertyInfo: typeof(OutboxMessage).GetProperty("InitiatorId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(OutboxMessage).GetField("<InitiatorId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    nullable: true);
initiatorId.TypeMapping = GuidTypeMapping.Default.Clone(
    comparer: new ValueComparer<Guid?>(
        (Nullable<Guid> v1, Nullable<Guid> v2) => v1.HasValue && v2.HasValue && (Guid)v1 == (Guid)v2 || !v1.HasValue && !v2.HasValue,
        (Nullable<Guid> v) => v.HasValue ? ((Guid)v).GetHashCode() : 0,
        (Nullable<Guid> v) => v.HasValue ? (Nullable<Guid>)(Guid)v : default(Nullable<Guid>)),
    keyComparer: new ValueComparer<Guid?>(
        (Nullable<Guid> v1, Nullable<Guid> v2) => v1.HasValue && v2.HasValue && (Guid)v1 == (Guid)v2 || !v1.HasValue && !v2.HasValue,
        (Nullable<Guid> v) => v.HasValue ? ((Guid)v).GetHashCode() : 0,
        (Nullable<Guid> v) => v.HasValue ? (Nullable<Guid>)(Guid)v : default(Nullable<Guid>)),
    providerValueComparer: new ValueComparer<Guid?>(
        (Nullable<Guid> v1, Nullable<Guid> v2) => v1.HasValue && v2.HasValue && (Guid)v1 == (Guid)v2 || !v1.HasValue && !v2.HasValue,
        (Nullable<Guid> v) => v.HasValue ? ((Guid)v).GetHashCode() : 0,
        (Nullable<Guid> v) => v.HasValue ? (Nullable<Guid>)(Guid)v : default(Nullable<Guid>)),
    mappingInfo: new RelationalTypeMappingInfo(
        storeTypeName: "uuid"));
initiatorId.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
initiatorId.AddAnnotation("Relational:ColumnName", "initiator_id");

var messageId = runtimeEntityType.AddProperty(
    "MessageId",
    typeof(Guid),
    propertyInfo: typeof(OutboxMessage).GetProperty("MessageId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(OutboxMessage).GetField("<MessageId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
messageId.TypeMapping = GuidTypeMapping.Default.Clone(
    comparer: new ValueComparer<Guid>(
        (Guid v1, Guid v2) => v1 == v2,
        (Guid v) => v.GetHashCode(),
        (Guid v) => v),
    keyComparer: new ValueComparer<Guid>(
        (Guid v1, Guid v2) => v1 == v2,
        (Guid v) => v.GetHashCode(),
        (Guid v) => v),
    providerValueComparer: new ValueComparer<Guid>(
        (Guid v1, Guid v2) => v1 == v2,
        (Guid v) => v.GetHashCode(),
        (Guid v) => v),
    mappingInfo: new RelationalTypeMappingInfo(
        storeTypeName: "uuid"));
messageId.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
messageId.AddAnnotation("Relational:ColumnName", "message_id");

var messageType = runtimeEntityType.AddProperty(
    "MessageType",
    typeof(string),
    propertyInfo: typeof(OutboxMessage).GetProperty("MessageType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(OutboxMessage).GetField("<MessageType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
messageType.TypeMapping = StringTypeMapping.Default.Clone(
    comparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    keyComparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    providerValueComparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    mappingInfo: new RelationalTypeMappingInfo(
        dbType: System.Data.DbType.String));
messageType.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
messageType.AddAnnotation("Relational:ColumnName", "message_type");

var outboxId = runtimeEntityType.AddProperty(
    "OutboxId",
    typeof(Guid?),
    propertyInfo: typeof(OutboxMessage).GetProperty("OutboxId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(OutboxMessage).GetField("<OutboxId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    nullable: true);
outboxId.TypeMapping = GuidTypeMapping.Default.Clone(
    comparer: new ValueComparer<Guid?>(
        (Nullable<Guid> v1, Nullable<Guid> v2) => v1.HasValue && v2.HasValue && (Guid)v1 == (Guid)v2 || !v1.HasValue && !v2.HasValue,
        (Nullable<Guid> v) => v.HasValue ? ((Guid)v).GetHashCode() : 0,
        (Nullable<Guid> v) => v.HasValue ? (Nullable<Guid>)(Guid)v : default(Nullable<Guid>)),
    keyComparer: new ValueComparer<Guid?>(
        (Nullable<Guid> v1, Nullable<Guid> v2) => v1.HasValue && v2.HasValue && (Guid)v1 == (Guid)v2 || !v1.HasValue && !v2.HasValue,
        (Nullable<Guid> v) => v.HasValue ? ((Guid)v).GetHashCode() : 0,
        (Nullable<Guid> v) => v.HasValue ? (Nullable<Guid>)(Guid)v : default(Nullable<Guid>)),
    providerValueComparer: new ValueComparer<Guid?>(
        (Nullable<Guid> v1, Nullable<Guid> v2) => v1.HasValue && v2.HasValue && (Guid)v1 == (Guid)v2 || !v1.HasValue && !v2.HasValue,
        (Nullable<Guid> v) => v.HasValue ? ((Guid)v).GetHashCode() : 0,
        (Nullable<Guid> v) => v.HasValue ? (Nullable<Guid>)(Guid)v : default(Nullable<Guid>)),
    mappingInfo: new RelationalTypeMappingInfo(
        storeTypeName: "uuid"));
outboxId.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
outboxId.AddAnnotation("Relational:ColumnName", "outbox_id");

var properties = runtimeEntityType.AddProperty(
    "Properties",
    typeof(string),
    propertyInfo: typeof(OutboxMessage).GetProperty("Properties", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(OutboxMessage).GetField("<Properties>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    nullable: true);
properties.TypeMapping = StringTypeMapping.Default.Clone(
    comparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    keyComparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    providerValueComparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    mappingInfo: new RelationalTypeMappingInfo(
        dbType: System.Data.DbType.String));
properties.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
properties.AddAnnotation("Relational:ColumnName", "properties");

var requestId = runtimeEntityType.AddProperty(
    "RequestId",
    typeof(Guid?),
    propertyInfo: typeof(OutboxMessage).GetProperty("RequestId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(OutboxMessage).GetField("<RequestId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    nullable: true);
requestId.TypeMapping = GuidTypeMapping.Default.Clone(
    comparer: new ValueComparer<Guid?>(
        (Nullable<Guid> v1, Nullable<Guid> v2) => v1.HasValue && v2.HasValue && (Guid)v1 == (Guid)v2 || !v1.HasValue && !v2.HasValue,
        (Nullable<Guid> v) => v.HasValue ? ((Guid)v).GetHashCode() : 0,
        (Nullable<Guid> v) => v.HasValue ? (Nullable<Guid>)(Guid)v : default(Nullable<Guid>)),
    keyComparer: new ValueComparer<Guid?>(
        (Nullable<Guid> v1, Nullable<Guid> v2) => v1.HasValue && v2.HasValue && (Guid)v1 == (Guid)v2 || !v1.HasValue && !v2.HasValue,
        (Nullable<Guid> v) => v.HasValue ? ((Guid)v).GetHashCode() : 0,
        (Nullable<Guid> v) => v.HasValue ? (Nullable<Guid>)(Guid)v : default(Nullable<Guid>)),
    providerValueComparer: new ValueComparer<Guid?>(
        (Nullable<Guid> v1, Nullable<Guid> v2) => v1.HasValue && v2.HasValue && (Guid)v1 == (Guid)v2 || !v1.HasValue && !v2.HasValue,
        (Nullable<Guid> v) => v.HasValue ? ((Guid)v).GetHashCode() : 0,
        (Nullable<Guid> v) => v.HasValue ? (Nullable<Guid>)(Guid)v : default(Nullable<Guid>)),
    mappingInfo: new RelationalTypeMappingInfo(
        storeTypeName: "uuid"));
requestId.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
requestId.AddAnnotation("Relational:ColumnName", "request_id");

var responseAddress = runtimeEntityType.AddProperty(
    "ResponseAddress",
    typeof(Uri),
    propertyInfo: typeof(OutboxMessage).GetProperty("ResponseAddress", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(OutboxMessage).GetField("<ResponseAddress>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    nullable: true,
    maxLength: 256);
responseAddress.TypeMapping = NpgsqlStringTypeMapping.Default.Clone(
    comparer: new ValueComparer<Uri>(
        (Uri v1, Uri v2) => v1 == v2,
        (Uri v) => v.GetHashCode(),
        (Uri v) => v),
    keyComparer: new ValueComparer<Uri>(
        (Uri v1, Uri v2) => v1 == v2,
        (Uri v) => v.GetHashCode(),
        (Uri v) => v),
    providerValueComparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    mappingInfo: new RelationalTypeMappingInfo(
        storeTypeName: "character varying(256)",
        size: 256),
    converter: new ValueConverter<Uri, string>(
        (Uri v) => v.ToString(),
        (string v) => new Uri(v, UriKind.RelativeOrAbsolute)),
    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<Uri, string>(
        JsonStringReaderWriter.Instance,
        new ValueConverter<Uri, string>(
            (Uri v) => v.ToString(),
            (string v) => new Uri(v, UriKind.RelativeOrAbsolute))));
responseAddress.TypeMapping = ((NpgsqlStringTypeMapping)responseAddress.TypeMapping).Clone(npgsqlDbType: NpgsqlTypes.NpgsqlDbType.Varchar);
responseAddress.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
responseAddress.AddAnnotation("Relational:ColumnName", "response_address");

var sentTime = runtimeEntityType.AddProperty(
    "SentTime",
    typeof(DateTime),
    propertyInfo: typeof(OutboxMessage).GetProperty("SentTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(OutboxMessage).GetField("<SentTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
sentTime.TypeMapping = NpgsqlTimestampTzTypeMapping.Default.Clone(
    comparer: new ValueComparer<DateTime>(
        (DateTime v1, DateTime v2) => v1.Equals(v2),
        (DateTime v) => v.GetHashCode(),
        (DateTime v) => v),
    keyComparer: new ValueComparer<DateTime>(
        (DateTime v1, DateTime v2) => v1.Equals(v2),
        (DateTime v) => v.GetHashCode(),
        (DateTime v) => v),
    providerValueComparer: new ValueComparer<DateTime>(
        (DateTime v1, DateTime v2) => v1.Equals(v2),
        (DateTime v) => v.GetHashCode(),
        (DateTime v) => v));
sentTime.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
sentTime.AddAnnotation("Relational:ColumnName", "sent_time");

var sourceAddress = runtimeEntityType.AddProperty(
    "SourceAddress",
    typeof(Uri),
    propertyInfo: typeof(OutboxMessage).GetProperty("SourceAddress", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(OutboxMessage).GetField("<SourceAddress>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    nullable: true,
    maxLength: 256);
sourceAddress.TypeMapping = NpgsqlStringTypeMapping.Default.Clone(
    comparer: new ValueComparer<Uri>(
        (Uri v1, Uri v2) => v1 == v2,
        (Uri v) => v.GetHashCode(),
        (Uri v) => v),
    keyComparer: new ValueComparer<Uri>(
        (Uri v1, Uri v2) => v1 == v2,
        (Uri v) => v.GetHashCode(),
        (Uri v) => v),
    providerValueComparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    mappingInfo: new RelationalTypeMappingInfo(
        storeTypeName: "character varying(256)",
        size: 256),
    converter: new ValueConverter<Uri, string>(
        (Uri v) => v.ToString(),
        (string v) => new Uri(v, UriKind.RelativeOrAbsolute)),
    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<Uri, string>(
        JsonStringReaderWriter.Instance,
        new ValueConverter<Uri, string>(
            (Uri v) => v.ToString(),
            (string v) => new Uri(v, UriKind.RelativeOrAbsolute))));
sourceAddress.TypeMapping = ((NpgsqlStringTypeMapping)sourceAddress.TypeMapping).Clone(npgsqlDbType: NpgsqlTypes.NpgsqlDbType.Varchar);
sourceAddress.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
sourceAddress.AddAnnotation("Relational:ColumnName", "source_address");

var key = runtimeEntityType.AddKey(
    new[] { sequenceNumber });
runtimeEntityType.SetPrimaryKey(key);
key.AddAnnotation("Relational:Name", "pk_outbox_message");

var index = runtimeEntityType.AddIndex(
    new[] { enqueueTime });
index.AddAnnotation("Relational:Name", "ix_outbox_message_enqueue_time");

var index0 = runtimeEntityType.AddIndex(
    new[] { expirationTime });
index0.AddAnnotation("Relational:Name", "ix_outbox_message_expiration_time");

var index1 = runtimeEntityType.AddIndex(
    new[] { outboxId, sequenceNumber },
    unique: true);
index1.AddAnnotation("Relational:Name", "ix_outbox_message_outbox_id_sequence_number");

var index2 = runtimeEntityType.AddIndex(
    new[] { inboxMessageId, inboxConsumerId, sequenceNumber },
    unique: true);
index2.AddAnnotation("Relational:Name", "ix_outbox_message_inbox_message_id_inbox_consumer_id_sequence_");

return runtimeEntityType;
}

public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
{
    runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
    runtimeEntityType.AddAnnotation("Relational:Schema", null);
    runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
    runtimeEntityType.AddAnnotation("Relational:TableName", "outbox_message");
    runtimeEntityType.AddAnnotation("Relational:ViewName", null);
    runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

    Customize(runtimeEntityType);
}

static partial void Customize(RuntimeEntityType runtimeEntityType);
}
}
