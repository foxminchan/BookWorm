// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace BookWorm.Catalog.Infrastructure.Data.CompiledModels
{
    public partial class CatalogContextModel
    {
        partial void Initialize()
        {
            var author = AuthorEntityType.Create(this);
            var book = BookEntityType.Create(this);
            var bookAuthor = BookAuthorEntityType.Create(this);
            var price = PriceEntityType.Create(this);
            var category = CategoryEntityType.Create(this);
            var publisher = PublisherEntityType.Create(this);

            BookEntityType.CreateForeignKey1(book, category);
            BookEntityType.CreateForeignKey2(book, publisher);
            BookAuthorEntityType.CreateForeignKey1(bookAuthor, author);
            BookAuthorEntityType.CreateForeignKey2(bookAuthor, book);
            PriceEntityType.CreateForeignKey1(price, book);

            AuthorEntityType.CreateAnnotations(author);
            BookEntityType.CreateAnnotations(book);
            BookAuthorEntityType.CreateAnnotations(bookAuthor);
            PriceEntityType.CreateAnnotations(price);
            CategoryEntityType.CreateAnnotations(category);
            PublisherEntityType.CreateAnnotations(publisher);

            AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            AddAnnotation("ProductVersion", "8.0.8");
            AddAnnotation("Relational:MaxIdentifierLength", 63);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var author = FindEntityType("BookWorm.Catalog.Domain.Author")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            author.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var bookWormCatalogDomainAuthorTableBase = new TableBase("BookWorm.Catalog.Domain.Author", null, relationalModel);
            var created_dateColumnBase = new ColumnBase<ColumnMappingBase>("created_date", "timestamp with time zone", bookWormCatalogDomainAuthorTableBase);
            bookWormCatalogDomainAuthorTableBase.Columns.Add("created_date", created_dateColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("id", "uuid", bookWormCatalogDomainAuthorTableBase);
            bookWormCatalogDomainAuthorTableBase.Columns.Add("id", idColumnBase);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("name", "character varying(100)", bookWormCatalogDomainAuthorTableBase);
            bookWormCatalogDomainAuthorTableBase.Columns.Add("name", nameColumnBase);
            var update_dateColumnBase = new ColumnBase<ColumnMappingBase>("update_date", "timestamp with time zone", bookWormCatalogDomainAuthorTableBase)
            {
                IsNullable = true
            };
            bookWormCatalogDomainAuthorTableBase.Columns.Add("update_date", update_dateColumnBase);
            var versionColumnBase = new ColumnBase<ColumnMappingBase>("version", "uuid", bookWormCatalogDomainAuthorTableBase);
            bookWormCatalogDomainAuthorTableBase.Columns.Add("version", versionColumnBase);
            relationalModel.DefaultTables.Add("BookWorm.Catalog.Domain.Author", bookWormCatalogDomainAuthorTableBase);
            var bookWormCatalogDomainAuthorMappingBase = new TableMappingBase<ColumnMappingBase>(author, bookWormCatalogDomainAuthorTableBase, true);
            bookWormCatalogDomainAuthorTableBase.AddTypeMapping(bookWormCatalogDomainAuthorMappingBase, false);
            defaultTableMappings.Add(bookWormCatalogDomainAuthorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, author.FindProperty("Id")!, bookWormCatalogDomainAuthorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)created_dateColumnBase, author.FindProperty("CreatedDate")!, bookWormCatalogDomainAuthorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, author.FindProperty("Name")!, bookWormCatalogDomainAuthorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)update_dateColumnBase, author.FindProperty("UpdateDate")!, bookWormCatalogDomainAuthorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)versionColumnBase, author.FindProperty("Version")!, bookWormCatalogDomainAuthorMappingBase);

            var tableMappings = new List<TableMapping>();
            author.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var authorsTable = new Table("authors", null, relationalModel);
            var idColumn = new Column("id", "uuid", authorsTable);
            authorsTable.Columns.Add("id", idColumn);
            var created_dateColumn = new Column("created_date", "timestamp with time zone", authorsTable);
            authorsTable.Columns.Add("created_date", created_dateColumn);
            var nameColumn = new Column("name", "character varying(100)", authorsTable);
            authorsTable.Columns.Add("name", nameColumn);
            var update_dateColumn = new Column("update_date", "timestamp with time zone", authorsTable)
            {
                IsNullable = true
            };
            authorsTable.Columns.Add("update_date", update_dateColumn);
            var versionColumn = new Column("version", "uuid", authorsTable);
            authorsTable.Columns.Add("version", versionColumn);
            var pk_authors = new UniqueConstraint("pk_authors", authorsTable, new[] { idColumn });
            authorsTable.PrimaryKey = pk_authors;
            var pk_authorsUc = RelationalModel.GetKey(this,
                "BookWorm.Catalog.Domain.Author",
                new[] { "Id" });
            pk_authors.MappedKeys.Add(pk_authorsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_authorsUc).Add(pk_authors);
            authorsTable.UniqueConstraints.Add("pk_authors", pk_authors);
            relationalModel.Tables.Add(("authors", null), authorsTable);
            var authorsTableMapping = new TableMapping(author, authorsTable, true);
            authorsTable.AddTypeMapping(authorsTableMapping, false);
            tableMappings.Add(authorsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, author.FindProperty("Id")!, authorsTableMapping);
            RelationalModel.CreateColumnMapping(created_dateColumn, author.FindProperty("CreatedDate")!, authorsTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, author.FindProperty("Name")!, authorsTableMapping);
            RelationalModel.CreateColumnMapping(update_dateColumn, author.FindProperty("UpdateDate")!, authorsTableMapping);
            RelationalModel.CreateColumnMapping(versionColumn, author.FindProperty("Version")!, authorsTableMapping);

            var book = FindEntityType("BookWorm.Catalog.Domain.BookAggregate.Book")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            book.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var bookWormCatalogDomainBookAggregateBookTableBase = new TableBase("BookWorm.Catalog.Domain.BookAggregate.Book", null, relationalModel);
            var average_ratingColumnBase = new ColumnBase<ColumnMappingBase>("average_rating", "double precision", bookWormCatalogDomainBookAggregateBookTableBase);
            bookWormCatalogDomainBookAggregateBookTableBase.Columns.Add("average_rating", average_ratingColumnBase);
            var category_idColumnBase = new ColumnBase<ColumnMappingBase>("category_id", "uuid", bookWormCatalogDomainBookAggregateBookTableBase)
            {
                IsNullable = true
            };
            bookWormCatalogDomainBookAggregateBookTableBase.Columns.Add("category_id", category_idColumnBase);
            var created_dateColumnBase0 = new ColumnBase<ColumnMappingBase>("created_date", "timestamp with time zone", bookWormCatalogDomainBookAggregateBookTableBase);
            bookWormCatalogDomainBookAggregateBookTableBase.Columns.Add("created_date", created_dateColumnBase0);
            var descriptionColumnBase = new ColumnBase<ColumnMappingBase>("description", "character varying(500)", bookWormCatalogDomainBookAggregateBookTableBase);
            bookWormCatalogDomainBookAggregateBookTableBase.Columns.Add("description", descriptionColumnBase);
            var embeddingColumnBase = new ColumnBase<ColumnMappingBase>("embedding", "vector(384)", bookWormCatalogDomainBookAggregateBookTableBase)
            {
                IsNullable = true
            };
            bookWormCatalogDomainBookAggregateBookTableBase.Columns.Add("embedding", embeddingColumnBase);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("id", "uuid", bookWormCatalogDomainBookAggregateBookTableBase);
            bookWormCatalogDomainBookAggregateBookTableBase.Columns.Add("id", idColumnBase0);
            var image_urlColumnBase = new ColumnBase<ColumnMappingBase>("image_url", "character varying(500)", bookWormCatalogDomainBookAggregateBookTableBase)
            {
                IsNullable = true
            };
            bookWormCatalogDomainBookAggregateBookTableBase.Columns.Add("image_url", image_urlColumnBase);
            var is_deletedColumnBase = new ColumnBase<ColumnMappingBase>("is_deleted", "boolean", bookWormCatalogDomainBookAggregateBookTableBase);
            bookWormCatalogDomainBookAggregateBookTableBase.Columns.Add("is_deleted", is_deletedColumnBase);
            var nameColumnBase0 = new ColumnBase<ColumnMappingBase>("name", "character varying(50)", bookWormCatalogDomainBookAggregateBookTableBase);
            bookWormCatalogDomainBookAggregateBookTableBase.Columns.Add("name", nameColumnBase0);
            var publisher_idColumnBase = new ColumnBase<ColumnMappingBase>("publisher_id", "uuid", bookWormCatalogDomainBookAggregateBookTableBase)
            {
                IsNullable = true
            };
            bookWormCatalogDomainBookAggregateBookTableBase.Columns.Add("publisher_id", publisher_idColumnBase);
            var statusColumnBase = new ColumnBase<ColumnMappingBase>("status", "smallint", bookWormCatalogDomainBookAggregateBookTableBase);
            bookWormCatalogDomainBookAggregateBookTableBase.Columns.Add("status", statusColumnBase);
            var total_reviewsColumnBase = new ColumnBase<ColumnMappingBase>("total_reviews", "integer", bookWormCatalogDomainBookAggregateBookTableBase);
            bookWormCatalogDomainBookAggregateBookTableBase.Columns.Add("total_reviews", total_reviewsColumnBase);
            var update_dateColumnBase0 = new ColumnBase<ColumnMappingBase>("update_date", "timestamp with time zone", bookWormCatalogDomainBookAggregateBookTableBase)
            {
                IsNullable = true
            };
            bookWormCatalogDomainBookAggregateBookTableBase.Columns.Add("update_date", update_dateColumnBase0);
            var versionColumnBase0 = new ColumnBase<ColumnMappingBase>("version", "uuid", bookWormCatalogDomainBookAggregateBookTableBase);
            bookWormCatalogDomainBookAggregateBookTableBase.Columns.Add("version", versionColumnBase0);
            relationalModel.DefaultTables.Add("BookWorm.Catalog.Domain.BookAggregate.Book", bookWormCatalogDomainBookAggregateBookTableBase);
            var bookWormCatalogDomainBookAggregateBookMappingBase = new TableMappingBase<ColumnMappingBase>(book, bookWormCatalogDomainBookAggregateBookTableBase, true);
            bookWormCatalogDomainBookAggregateBookTableBase.AddTypeMapping(bookWormCatalogDomainBookAggregateBookMappingBase, false);
            defaultTableMappings0.Add(bookWormCatalogDomainBookAggregateBookMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, book.FindProperty("Id")!, bookWormCatalogDomainBookAggregateBookMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)average_ratingColumnBase, book.FindProperty("AverageRating")!, bookWormCatalogDomainBookAggregateBookMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)category_idColumnBase, book.FindProperty("CategoryId")!, bookWormCatalogDomainBookAggregateBookMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)created_dateColumnBase0, book.FindProperty("CreatedDate")!, bookWormCatalogDomainBookAggregateBookMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase, book.FindProperty("Description")!, bookWormCatalogDomainBookAggregateBookMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)embeddingColumnBase, book.FindProperty("Embedding")!, bookWormCatalogDomainBookAggregateBookMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)image_urlColumnBase, book.FindProperty("ImageUrl")!, bookWormCatalogDomainBookAggregateBookMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)is_deletedColumnBase, book.FindProperty("IsDeleted")!, bookWormCatalogDomainBookAggregateBookMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase0, book.FindProperty("Name")!, bookWormCatalogDomainBookAggregateBookMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)publisher_idColumnBase, book.FindProperty("PublisherId")!, bookWormCatalogDomainBookAggregateBookMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)statusColumnBase, book.FindProperty("Status")!, bookWormCatalogDomainBookAggregateBookMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)total_reviewsColumnBase, book.FindProperty("TotalReviews")!, bookWormCatalogDomainBookAggregateBookMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)update_dateColumnBase0, book.FindProperty("UpdateDate")!, bookWormCatalogDomainBookAggregateBookMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)versionColumnBase0, book.FindProperty("Version")!, bookWormCatalogDomainBookAggregateBookMappingBase);

            var tableMappings0 = new List<TableMapping>();
            book.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var booksTable = new Table("books", null, relationalModel);
            var idColumn0 = new Column("id", "uuid", booksTable);
            booksTable.Columns.Add("id", idColumn0);
            var average_ratingColumn = new Column("average_rating", "double precision", booksTable);
            booksTable.Columns.Add("average_rating", average_ratingColumn);
            var category_idColumn = new Column("category_id", "uuid", booksTable)
            {
                IsNullable = true
            };
            booksTable.Columns.Add("category_id", category_idColumn);
            var created_dateColumn0 = new Column("created_date", "timestamp with time zone", booksTable);
            booksTable.Columns.Add("created_date", created_dateColumn0);
            var descriptionColumn = new Column("description", "character varying(500)", booksTable);
            booksTable.Columns.Add("description", descriptionColumn);
            var embeddingColumn = new Column("embedding", "vector(384)", booksTable)
            {
                IsNullable = true
            };
            booksTable.Columns.Add("embedding", embeddingColumn);
            var image_urlColumn = new Column("image_url", "character varying(500)", booksTable)
            {
                IsNullable = true
            };
            booksTable.Columns.Add("image_url", image_urlColumn);
            var is_deletedColumn = new Column("is_deleted", "boolean", booksTable);
            booksTable.Columns.Add("is_deleted", is_deletedColumn);
            var nameColumn0 = new Column("name", "character varying(50)", booksTable);
            booksTable.Columns.Add("name", nameColumn0);
            var priceColumn = new JsonColumn("price", "jsonb", booksTable)
            {
                IsNullable = true
            };
            booksTable.Columns.Add("price", priceColumn);
            var publisher_idColumn = new Column("publisher_id", "uuid", booksTable)
            {
                IsNullable = true
            };
            booksTable.Columns.Add("publisher_id", publisher_idColumn);
            var statusColumn = new Column("status", "smallint", booksTable);
            booksTable.Columns.Add("status", statusColumn);
            var total_reviewsColumn = new Column("total_reviews", "integer", booksTable);
            booksTable.Columns.Add("total_reviews", total_reviewsColumn);
            var update_dateColumn0 = new Column("update_date", "timestamp with time zone", booksTable)
            {
                IsNullable = true
            };
            booksTable.Columns.Add("update_date", update_dateColumn0);
            var versionColumn0 = new Column("version", "uuid", booksTable);
            booksTable.Columns.Add("version", versionColumn0);
            var pk_books = new UniqueConstraint("pk_books", booksTable, new[] { idColumn0 });
            booksTable.PrimaryKey = pk_books;
            var pk_booksUc = RelationalModel.GetKey(this,
                "BookWorm.Catalog.Domain.BookAggregate.Book",
                new[] { "Id" });
            pk_books.MappedKeys.Add(pk_booksUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_booksUc).Add(pk_books);
            booksTable.UniqueConstraints.Add("pk_books", pk_books);
            var ix_books_category_id = new TableIndex(
            "ix_books_category_id", booksTable, new[] { category_idColumn }, false);
            var ix_books_category_idIx = RelationalModel.GetIndex(this,
                "BookWorm.Catalog.Domain.BookAggregate.Book",
                new[] { "CategoryId" });
            ix_books_category_id.MappedIndexes.Add(ix_books_category_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_books_category_idIx).Add(ix_books_category_id);
            booksTable.Indexes.Add("ix_books_category_id", ix_books_category_id);
            var ix_books_publisher_id = new TableIndex(
            "ix_books_publisher_id", booksTable, new[] { publisher_idColumn }, false);
            var ix_books_publisher_idIx = RelationalModel.GetIndex(this,
                "BookWorm.Catalog.Domain.BookAggregate.Book",
                new[] { "PublisherId" });
            ix_books_publisher_id.MappedIndexes.Add(ix_books_publisher_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_books_publisher_idIx).Add(ix_books_publisher_id);
            booksTable.Indexes.Add("ix_books_publisher_id", ix_books_publisher_id);
            relationalModel.Tables.Add(("books", null), booksTable);
            var booksTableMapping = new TableMapping(book, booksTable, true)
            {
                IsSharedTablePrincipal = true,
            };
            booksTable.AddTypeMapping(booksTableMapping, false);
            tableMappings0.Add(booksTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, book.FindProperty("Id")!, booksTableMapping);
            RelationalModel.CreateColumnMapping(average_ratingColumn, book.FindProperty("AverageRating")!, booksTableMapping);
            RelationalModel.CreateColumnMapping(category_idColumn, book.FindProperty("CategoryId")!, booksTableMapping);
            RelationalModel.CreateColumnMapping(created_dateColumn0, book.FindProperty("CreatedDate")!, booksTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn, book.FindProperty("Description")!, booksTableMapping);
            RelationalModel.CreateColumnMapping(embeddingColumn, book.FindProperty("Embedding")!, booksTableMapping);
            RelationalModel.CreateColumnMapping(image_urlColumn, book.FindProperty("ImageUrl")!, booksTableMapping);
            RelationalModel.CreateColumnMapping(is_deletedColumn, book.FindProperty("IsDeleted")!, booksTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn0, book.FindProperty("Name")!, booksTableMapping);
            RelationalModel.CreateColumnMapping(publisher_idColumn, book.FindProperty("PublisherId")!, booksTableMapping);
            RelationalModel.CreateColumnMapping(statusColumn, book.FindProperty("Status")!, booksTableMapping);
            RelationalModel.CreateColumnMapping(total_reviewsColumn, book.FindProperty("TotalReviews")!, booksTableMapping);
            RelationalModel.CreateColumnMapping(update_dateColumn0, book.FindProperty("UpdateDate")!, booksTableMapping);
            RelationalModel.CreateColumnMapping(versionColumn0, book.FindProperty("Version")!, booksTableMapping);

            var bookAuthor = FindEntityType("BookWorm.Catalog.Domain.BookAggregate.BookAuthor")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            bookAuthor.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var bookWormCatalogDomainBookAggregateBookAuthorTableBase = new TableBase("BookWorm.Catalog.Domain.BookAggregate.BookAuthor", null, relationalModel);
            var author_idColumnBase = new ColumnBase<ColumnMappingBase>("author_id", "uuid", bookWormCatalogDomainBookAggregateBookAuthorTableBase);
            bookWormCatalogDomainBookAggregateBookAuthorTableBase.Columns.Add("author_id", author_idColumnBase);
            var book_idColumnBase = new ColumnBase<ColumnMappingBase>("book_id", "uuid", bookWormCatalogDomainBookAggregateBookAuthorTableBase);
            bookWormCatalogDomainBookAggregateBookAuthorTableBase.Columns.Add("book_id", book_idColumnBase);
            var created_dateColumnBase1 = new ColumnBase<ColumnMappingBase>("created_date", "timestamp with time zone", bookWormCatalogDomainBookAggregateBookAuthorTableBase);
            bookWormCatalogDomainBookAggregateBookAuthorTableBase.Columns.Add("created_date", created_dateColumnBase1);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("id", "uuid", bookWormCatalogDomainBookAggregateBookAuthorTableBase);
            bookWormCatalogDomainBookAggregateBookAuthorTableBase.Columns.Add("id", idColumnBase1);
            var update_dateColumnBase1 = new ColumnBase<ColumnMappingBase>("update_date", "timestamp with time zone", bookWormCatalogDomainBookAggregateBookAuthorTableBase)
            {
                IsNullable = true
            };
            bookWormCatalogDomainBookAggregateBookAuthorTableBase.Columns.Add("update_date", update_dateColumnBase1);
            var versionColumnBase1 = new ColumnBase<ColumnMappingBase>("version", "uuid", bookWormCatalogDomainBookAggregateBookAuthorTableBase);
            bookWormCatalogDomainBookAggregateBookAuthorTableBase.Columns.Add("version", versionColumnBase1);
            relationalModel.DefaultTables.Add("BookWorm.Catalog.Domain.BookAggregate.BookAuthor", bookWormCatalogDomainBookAggregateBookAuthorTableBase);
            var bookWormCatalogDomainBookAggregateBookAuthorMappingBase = new TableMappingBase<ColumnMappingBase>(bookAuthor, bookWormCatalogDomainBookAggregateBookAuthorTableBase, true);
            bookWormCatalogDomainBookAggregateBookAuthorTableBase.AddTypeMapping(bookWormCatalogDomainBookAggregateBookAuthorMappingBase, false);
            defaultTableMappings1.Add(bookWormCatalogDomainBookAggregateBookAuthorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, bookAuthor.FindProperty("Id")!, bookWormCatalogDomainBookAggregateBookAuthorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)author_idColumnBase, bookAuthor.FindProperty("AuthorId")!, bookWormCatalogDomainBookAggregateBookAuthorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)book_idColumnBase, bookAuthor.FindProperty("BookId")!, bookWormCatalogDomainBookAggregateBookAuthorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)created_dateColumnBase1, bookAuthor.FindProperty("CreatedDate")!, bookWormCatalogDomainBookAggregateBookAuthorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)update_dateColumnBase1, bookAuthor.FindProperty("UpdateDate")!, bookWormCatalogDomainBookAggregateBookAuthorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)versionColumnBase1, bookAuthor.FindProperty("Version")!, bookWormCatalogDomainBookAggregateBookAuthorMappingBase);

            var tableMappings1 = new List<TableMapping>();
            bookAuthor.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var book_authorsTable = new Table("book_authors", null, relationalModel);
            var idColumn1 = new Column("id", "uuid", book_authorsTable);
            book_authorsTable.Columns.Add("id", idColumn1);
            var author_idColumn = new Column("author_id", "uuid", book_authorsTable);
            book_authorsTable.Columns.Add("author_id", author_idColumn);
            var book_idColumn = new Column("book_id", "uuid", book_authorsTable);
            book_authorsTable.Columns.Add("book_id", book_idColumn);
            var created_dateColumn1 = new Column("created_date", "timestamp with time zone", book_authorsTable);
            book_authorsTable.Columns.Add("created_date", created_dateColumn1);
            var update_dateColumn1 = new Column("update_date", "timestamp with time zone", book_authorsTable)
            {
                IsNullable = true
            };
            book_authorsTable.Columns.Add("update_date", update_dateColumn1);
            var versionColumn1 = new Column("version", "uuid", book_authorsTable);
            book_authorsTable.Columns.Add("version", versionColumn1);
            var pk_book_authors = new UniqueConstraint("pk_book_authors", book_authorsTable, new[] { idColumn1 });
            book_authorsTable.PrimaryKey = pk_book_authors;
            var pk_book_authorsUc = RelationalModel.GetKey(this,
                "BookWorm.Catalog.Domain.BookAggregate.BookAuthor",
                new[] { "Id" });
            pk_book_authors.MappedKeys.Add(pk_book_authorsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_book_authorsUc).Add(pk_book_authors);
            book_authorsTable.UniqueConstraints.Add("pk_book_authors", pk_book_authors);
            var ix_book_authors_author_id = new TableIndex(
            "ix_book_authors_author_id", book_authorsTable, new[] { author_idColumn }, false);
            var ix_book_authors_author_idIx = RelationalModel.GetIndex(this,
                "BookWorm.Catalog.Domain.BookAggregate.BookAuthor",
                new[] { "AuthorId" });
            ix_book_authors_author_id.MappedIndexes.Add(ix_book_authors_author_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_book_authors_author_idIx).Add(ix_book_authors_author_id);
            book_authorsTable.Indexes.Add("ix_book_authors_author_id", ix_book_authors_author_id);
            var ix_book_authors_book_id = new TableIndex(
            "ix_book_authors_book_id", book_authorsTable, new[] { book_idColumn }, false);
            var ix_book_authors_book_idIx = RelationalModel.GetIndex(this,
                "BookWorm.Catalog.Domain.BookAggregate.BookAuthor",
                new[] { "BookId" });
            ix_book_authors_book_id.MappedIndexes.Add(ix_book_authors_book_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_book_authors_book_idIx).Add(ix_book_authors_book_id);
            book_authorsTable.Indexes.Add("ix_book_authors_book_id", ix_book_authors_book_id);
            relationalModel.Tables.Add(("book_authors", null), book_authorsTable);
            var book_authorsTableMapping = new TableMapping(bookAuthor, book_authorsTable, true);
            book_authorsTable.AddTypeMapping(book_authorsTableMapping, false);
            tableMappings1.Add(book_authorsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, bookAuthor.FindProperty("Id")!, book_authorsTableMapping);
            RelationalModel.CreateColumnMapping(author_idColumn, bookAuthor.FindProperty("AuthorId")!, book_authorsTableMapping);
            RelationalModel.CreateColumnMapping(book_idColumn, bookAuthor.FindProperty("BookId")!, book_authorsTableMapping);
            RelationalModel.CreateColumnMapping(created_dateColumn1, bookAuthor.FindProperty("CreatedDate")!, book_authorsTableMapping);
            RelationalModel.CreateColumnMapping(update_dateColumn1, bookAuthor.FindProperty("UpdateDate")!, book_authorsTableMapping);
            RelationalModel.CreateColumnMapping(versionColumn1, bookAuthor.FindProperty("Version")!, book_authorsTableMapping);

            var price = FindEntityType("BookWorm.Catalog.Domain.BookAggregate.Price")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            price.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var bookWormCatalogDomainBookAggregatePriceTableBase = new TableBase("BookWorm.Catalog.Domain.BookAggregate.Price", null, relationalModel);
            var priceColumnBase = new JsonColumnBase("price", "jsonb", bookWormCatalogDomainBookAggregatePriceTableBase)
            {
                IsNullable = true
            };
            bookWormCatalogDomainBookAggregatePriceTableBase.Columns.Add("price", priceColumnBase);
            relationalModel.DefaultTables.Add("BookWorm.Catalog.Domain.BookAggregate.Price", bookWormCatalogDomainBookAggregatePriceTableBase);
            var bookWormCatalogDomainBookAggregatePriceMappingBase = new TableMappingBase<ColumnMappingBase>(price, bookWormCatalogDomainBookAggregatePriceTableBase, true);
            bookWormCatalogDomainBookAggregatePriceTableBase.AddTypeMapping(bookWormCatalogDomainBookAggregatePriceMappingBase, false);
            defaultTableMappings2.Add(bookWormCatalogDomainBookAggregatePriceMappingBase);

            var tableMappings2 = new List<TableMapping>();
            price.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var booksTableMapping0 = new TableMapping(price, booksTable, true)
            {
                IsSharedTablePrincipal = false,
            };
            booksTable.AddTypeMapping(booksTableMapping0, true);
            tableMappings2.Add(booksTableMapping0);
            booksTable.AddRowInternalForeignKey(price, RelationalModel.GetForeignKey(this,
                "BookWorm.Catalog.Domain.BookAggregate.Price",
                new[] { "BookId" },
                "BookWorm.Catalog.Domain.BookAggregate.Book",
                new[] { "Id" }));

            var category = FindEntityType("BookWorm.Catalog.Domain.Category")!;

            var defaultTableMappings3 = new List<TableMappingBase<ColumnMappingBase>>();
            category.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings3);
            var bookWormCatalogDomainCategoryTableBase = new TableBase("BookWorm.Catalog.Domain.Category", null, relationalModel);
            var created_dateColumnBase2 = new ColumnBase<ColumnMappingBase>("created_date", "timestamp with time zone", bookWormCatalogDomainCategoryTableBase);
            bookWormCatalogDomainCategoryTableBase.Columns.Add("created_date", created_dateColumnBase2);
            var idColumnBase2 = new ColumnBase<ColumnMappingBase>("id", "uuid", bookWormCatalogDomainCategoryTableBase);
            bookWormCatalogDomainCategoryTableBase.Columns.Add("id", idColumnBase2);
            var nameColumnBase1 = new ColumnBase<ColumnMappingBase>("name", "character varying(50)", bookWormCatalogDomainCategoryTableBase);
            bookWormCatalogDomainCategoryTableBase.Columns.Add("name", nameColumnBase1);
            var update_dateColumnBase2 = new ColumnBase<ColumnMappingBase>("update_date", "timestamp with time zone", bookWormCatalogDomainCategoryTableBase)
            {
                IsNullable = true
            };
            bookWormCatalogDomainCategoryTableBase.Columns.Add("update_date", update_dateColumnBase2);
            var versionColumnBase2 = new ColumnBase<ColumnMappingBase>("version", "uuid", bookWormCatalogDomainCategoryTableBase);
            bookWormCatalogDomainCategoryTableBase.Columns.Add("version", versionColumnBase2);
            relationalModel.DefaultTables.Add("BookWorm.Catalog.Domain.Category", bookWormCatalogDomainCategoryTableBase);
            var bookWormCatalogDomainCategoryMappingBase = new TableMappingBase<ColumnMappingBase>(category, bookWormCatalogDomainCategoryTableBase, true);
            bookWormCatalogDomainCategoryTableBase.AddTypeMapping(bookWormCatalogDomainCategoryMappingBase, false);
            defaultTableMappings3.Add(bookWormCatalogDomainCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase2, category.FindProperty("Id")!, bookWormCatalogDomainCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)created_dateColumnBase2, category.FindProperty("CreatedDate")!, bookWormCatalogDomainCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase1, category.FindProperty("Name")!, bookWormCatalogDomainCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)update_dateColumnBase2, category.FindProperty("UpdateDate")!, bookWormCatalogDomainCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)versionColumnBase2, category.FindProperty("Version")!, bookWormCatalogDomainCategoryMappingBase);

            var tableMappings3 = new List<TableMapping>();
            category.SetRuntimeAnnotation("Relational:TableMappings", tableMappings3);
            var categoriesTable = new Table("categories", null, relationalModel);
            var idColumn2 = new Column("id", "uuid", categoriesTable);
            categoriesTable.Columns.Add("id", idColumn2);
            var created_dateColumn2 = new Column("created_date", "timestamp with time zone", categoriesTable);
            categoriesTable.Columns.Add("created_date", created_dateColumn2);
            var nameColumn1 = new Column("name", "character varying(50)", categoriesTable);
            categoriesTable.Columns.Add("name", nameColumn1);
            var update_dateColumn2 = new Column("update_date", "timestamp with time zone", categoriesTable)
            {
                IsNullable = true
            };
            categoriesTable.Columns.Add("update_date", update_dateColumn2);
            var versionColumn2 = new Column("version", "uuid", categoriesTable);
            categoriesTable.Columns.Add("version", versionColumn2);
            var pk_categories = new UniqueConstraint("pk_categories", categoriesTable, new[] { idColumn2 });
            categoriesTable.PrimaryKey = pk_categories;
            var pk_categoriesUc = RelationalModel.GetKey(this,
                "BookWorm.Catalog.Domain.Category",
                new[] { "Id" });
            pk_categories.MappedKeys.Add(pk_categoriesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_categoriesUc).Add(pk_categories);
            categoriesTable.UniqueConstraints.Add("pk_categories", pk_categories);
            var ix_categories_name = new TableIndex(
            "ix_categories_name", categoriesTable, new[] { nameColumn1 }, true);
            var ix_categories_nameIx = RelationalModel.GetIndex(this,
                "BookWorm.Catalog.Domain.Category",
                new[] { "Name" });
            ix_categories_name.MappedIndexes.Add(ix_categories_nameIx);
            RelationalModel.GetOrCreateTableIndexes(ix_categories_nameIx).Add(ix_categories_name);
            categoriesTable.Indexes.Add("ix_categories_name", ix_categories_name);
            relationalModel.Tables.Add(("categories", null), categoriesTable);
            var categoriesTableMapping = new TableMapping(category, categoriesTable, true);
            categoriesTable.AddTypeMapping(categoriesTableMapping, false);
            tableMappings3.Add(categoriesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn2, category.FindProperty("Id")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(created_dateColumn2, category.FindProperty("CreatedDate")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn1, category.FindProperty("Name")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(update_dateColumn2, category.FindProperty("UpdateDate")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(versionColumn2, category.FindProperty("Version")!, categoriesTableMapping);

            var publisher = FindEntityType("BookWorm.Catalog.Domain.Publisher")!;

            var defaultTableMappings4 = new List<TableMappingBase<ColumnMappingBase>>();
            publisher.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings4);
            var bookWormCatalogDomainPublisherTableBase = new TableBase("BookWorm.Catalog.Domain.Publisher", null, relationalModel);
            var created_dateColumnBase3 = new ColumnBase<ColumnMappingBase>("created_date", "timestamp with time zone", bookWormCatalogDomainPublisherTableBase);
            bookWormCatalogDomainPublisherTableBase.Columns.Add("created_date", created_dateColumnBase3);
            var idColumnBase3 = new ColumnBase<ColumnMappingBase>("id", "uuid", bookWormCatalogDomainPublisherTableBase);
            bookWormCatalogDomainPublisherTableBase.Columns.Add("id", idColumnBase3);
            var nameColumnBase2 = new ColumnBase<ColumnMappingBase>("name", "character varying(100)", bookWormCatalogDomainPublisherTableBase);
            bookWormCatalogDomainPublisherTableBase.Columns.Add("name", nameColumnBase2);
            var update_dateColumnBase3 = new ColumnBase<ColumnMappingBase>("update_date", "timestamp with time zone", bookWormCatalogDomainPublisherTableBase)
            {
                IsNullable = true
            };
            bookWormCatalogDomainPublisherTableBase.Columns.Add("update_date", update_dateColumnBase3);
            var versionColumnBase3 = new ColumnBase<ColumnMappingBase>("version", "uuid", bookWormCatalogDomainPublisherTableBase);
            bookWormCatalogDomainPublisherTableBase.Columns.Add("version", versionColumnBase3);
            relationalModel.DefaultTables.Add("BookWorm.Catalog.Domain.Publisher", bookWormCatalogDomainPublisherTableBase);
            var bookWormCatalogDomainPublisherMappingBase = new TableMappingBase<ColumnMappingBase>(publisher, bookWormCatalogDomainPublisherTableBase, true);
            bookWormCatalogDomainPublisherTableBase.AddTypeMapping(bookWormCatalogDomainPublisherMappingBase, false);
            defaultTableMappings4.Add(bookWormCatalogDomainPublisherMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase3, publisher.FindProperty("Id")!, bookWormCatalogDomainPublisherMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)created_dateColumnBase3, publisher.FindProperty("CreatedDate")!, bookWormCatalogDomainPublisherMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase2, publisher.FindProperty("Name")!, bookWormCatalogDomainPublisherMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)update_dateColumnBase3, publisher.FindProperty("UpdateDate")!, bookWormCatalogDomainPublisherMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)versionColumnBase3, publisher.FindProperty("Version")!, bookWormCatalogDomainPublisherMappingBase);

            var tableMappings4 = new List<TableMapping>();
            publisher.SetRuntimeAnnotation("Relational:TableMappings", tableMappings4);
            var publishersTable = new Table("publishers", null, relationalModel);
            var idColumn3 = new Column("id", "uuid", publishersTable);
            publishersTable.Columns.Add("id", idColumn3);
            var created_dateColumn3 = new Column("created_date", "timestamp with time zone", publishersTable);
            publishersTable.Columns.Add("created_date", created_dateColumn3);
            var nameColumn2 = new Column("name", "character varying(100)", publishersTable);
            publishersTable.Columns.Add("name", nameColumn2);
            var update_dateColumn3 = new Column("update_date", "timestamp with time zone", publishersTable)
            {
                IsNullable = true
            };
            publishersTable.Columns.Add("update_date", update_dateColumn3);
            var versionColumn3 = new Column("version", "uuid", publishersTable);
            publishersTable.Columns.Add("version", versionColumn3);
            var pk_publishers = new UniqueConstraint("pk_publishers", publishersTable, new[] { idColumn3 });
            publishersTable.PrimaryKey = pk_publishers;
            var pk_publishersUc = RelationalModel.GetKey(this,
                "BookWorm.Catalog.Domain.Publisher",
                new[] { "Id" });
            pk_publishers.MappedKeys.Add(pk_publishersUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_publishersUc).Add(pk_publishers);
            publishersTable.UniqueConstraints.Add("pk_publishers", pk_publishers);
            var ix_publishers_name = new TableIndex(
            "ix_publishers_name", publishersTable, new[] { nameColumn2 }, true);
            var ix_publishers_nameIx = RelationalModel.GetIndex(this,
                "BookWorm.Catalog.Domain.Publisher",
                new[] { "Name" });
            ix_publishers_name.MappedIndexes.Add(ix_publishers_nameIx);
            RelationalModel.GetOrCreateTableIndexes(ix_publishers_nameIx).Add(ix_publishers_name);
            publishersTable.Indexes.Add("ix_publishers_name", ix_publishers_name);
            relationalModel.Tables.Add(("publishers", null), publishersTable);
            var publishersTableMapping = new TableMapping(publisher, publishersTable, true);
            publishersTable.AddTypeMapping(publishersTableMapping, false);
            tableMappings4.Add(publishersTableMapping);
            RelationalModel.CreateColumnMapping(idColumn3, publisher.FindProperty("Id")!, publishersTableMapping);
            RelationalModel.CreateColumnMapping(created_dateColumn3, publisher.FindProperty("CreatedDate")!, publishersTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn2, publisher.FindProperty("Name")!, publishersTableMapping);
            RelationalModel.CreateColumnMapping(update_dateColumn3, publisher.FindProperty("UpdateDate")!, publishersTableMapping);
            RelationalModel.CreateColumnMapping(versionColumn3, publisher.FindProperty("Version")!, publishersTableMapping);
            var fk_book_authors_authors_author_id = new ForeignKeyConstraint(
                "fk_book_authors_authors_author_id", book_authorsTable, authorsTable,
                new[] { author_idColumn },
                authorsTable.FindUniqueConstraint("pk_authors")!, ReferentialAction.Cascade);
            var fk_book_authors_authors_author_idFk = RelationalModel.GetForeignKey(this,
                "BookWorm.Catalog.Domain.BookAggregate.BookAuthor",
                new[] { "AuthorId" },
                "BookWorm.Catalog.Domain.Author",
                new[] { "Id" });
            fk_book_authors_authors_author_id.MappedForeignKeys.Add(fk_book_authors_authors_author_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_book_authors_authors_author_idFk).Add(fk_book_authors_authors_author_id);
            book_authorsTable.ForeignKeyConstraints.Add(fk_book_authors_authors_author_id);
            authorsTable.ReferencingForeignKeyConstraints.Add(fk_book_authors_authors_author_id);
            var fk_book_authors_books_book_id = new ForeignKeyConstraint(
                "fk_book_authors_books_book_id", book_authorsTable, booksTable,
                new[] { book_idColumn },
                booksTable.FindUniqueConstraint("pk_books")!, ReferentialAction.Cascade);
            var fk_book_authors_books_book_idFk = RelationalModel.GetForeignKey(this,
                "BookWorm.Catalog.Domain.BookAggregate.BookAuthor",
                new[] { "BookId" },
                "BookWorm.Catalog.Domain.BookAggregate.Book",
                new[] { "Id" });
            fk_book_authors_books_book_id.MappedForeignKeys.Add(fk_book_authors_books_book_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_book_authors_books_book_idFk).Add(fk_book_authors_books_book_id);
            book_authorsTable.ForeignKeyConstraints.Add(fk_book_authors_books_book_id);
            booksTable.ReferencingForeignKeyConstraints.Add(fk_book_authors_books_book_id);
            var fk_books_categories_category_id = new ForeignKeyConstraint(
                "fk_books_categories_category_id", booksTable, categoriesTable,
                new[] { category_idColumn },
                categoriesTable.FindUniqueConstraint("pk_categories")!, ReferentialAction.SetNull);
            var fk_books_categories_category_idFk = RelationalModel.GetForeignKey(this,
                "BookWorm.Catalog.Domain.BookAggregate.Book",
                new[] { "CategoryId" },
                "BookWorm.Catalog.Domain.Category",
                new[] { "Id" });
            fk_books_categories_category_id.MappedForeignKeys.Add(fk_books_categories_category_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_books_categories_category_idFk).Add(fk_books_categories_category_id);
            booksTable.ForeignKeyConstraints.Add(fk_books_categories_category_id);
            categoriesTable.ReferencingForeignKeyConstraints.Add(fk_books_categories_category_id);
            var fk_books_publishers_publisher_id = new ForeignKeyConstraint(
                "fk_books_publishers_publisher_id", booksTable, publishersTable,
                new[] { publisher_idColumn },
                publishersTable.FindUniqueConstraint("pk_publishers")!, ReferentialAction.SetNull);
            var fk_books_publishers_publisher_idFk = RelationalModel.GetForeignKey(this,
                "BookWorm.Catalog.Domain.BookAggregate.Book",
                new[] { "PublisherId" },
                "BookWorm.Catalog.Domain.Publisher",
                new[] { "Id" });
            fk_books_publishers_publisher_id.MappedForeignKeys.Add(fk_books_publishers_publisher_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_books_publishers_publisher_idFk).Add(fk_books_publishers_publisher_id);
            booksTable.ForeignKeyConstraints.Add(fk_books_publishers_publisher_id);
            publishersTable.ReferencingForeignKeyConstraints.Add(fk_books_publishers_publisher_id);
            return relationalModel.MakeReadOnly();
        }
    }
}
