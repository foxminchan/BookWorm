// <auto-generated />
using System;
using System.Reflection;
using BookWorm.Catalog.Domain;
using BookWorm.Catalog.Domain.BookAggregate;
using BookWorm.Core.SeedWork;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Json;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping;
using Pgvector;
using Pgvector.EntityFrameworkCore;

#pragma warning disable 219, 612, 618
#nullable disable

namespace BookWorm.Catalog.Infrastructure.Data.CompiledModels
{
    internal partial class BookEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "BookWorm.Catalog.Domain.BookAggregate.Book",
                typeof(Book),
                baseEntityType);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(Guid),
                propertyInfo: typeof(EntityBase).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EntityBase).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            id.TypeMapping = GuidTypeMapping.Default.Clone(
                comparer: new ValueComparer<Guid>(
                    (Guid v1, Guid v2) => v1 == v2,
                    (Guid v) => v.GetHashCode(),
                    (Guid v) => v),
                keyComparer: new ValueComparer<Guid>(
                    (Guid v1, Guid v2) => v1 == v2,
                    (Guid v) => v.GetHashCode(),
                    (Guid v) => v),
                providerValueComparer: new ValueComparer<Guid>(
                    (Guid v1, Guid v2) => v1 == v2,
                    (Guid v) => v.GetHashCode(),
                    (Guid v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "uuid"));
            id.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
            id.AddAnnotation("Relational:ColumnName", "id");
            id.AddAnnotation("Relational:DefaultValueSql", "uuid_generate_v4()");

            var averageRating = runtimeEntityType.AddProperty(
                "AverageRating",
                typeof(double),
                propertyInfo: typeof(Book).GetProperty("AverageRating", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Book).GetField("<AverageRating>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                sentinel: 0.0);
            averageRating.TypeMapping = NpgsqlDoubleTypeMapping.Default.Clone(
                comparer: new ValueComparer<double>(
                    (double v1, double v2) => v1.Equals(v2),
                    (double v) => v.GetHashCode(),
                    (double v) => v),
                keyComparer: new ValueComparer<double>(
                    (double v1, double v2) => v1.Equals(v2),
                    (double v) => v.GetHashCode(),
                    (double v) => v),
                providerValueComparer: new ValueComparer<double>(
                    (double v1, double v2) => v1.Equals(v2),
                    (double v) => v.GetHashCode(),
                    (double v) => v));
            averageRating.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
            averageRating.AddAnnotation("Relational:ColumnName", "average_rating");
            averageRating.AddAnnotation("Relational:DefaultValue", 0.0);

            var categoryId = runtimeEntityType.AddProperty(
                "CategoryId",
                typeof(Guid?),
                propertyInfo: typeof(Book).GetProperty("CategoryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Book).GetField("<CategoryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            categoryId.TypeMapping = GuidTypeMapping.Default.Clone(
                comparer: new ValueComparer<Guid?>(
                    (Nullable<Guid> v1, Nullable<Guid> v2) => v1.HasValue && v2.HasValue && (Guid)v1 == (Guid)v2 || !v1.HasValue && !v2.HasValue,
                    (Nullable<Guid> v) => v.HasValue ? ((Guid)v).GetHashCode() : 0,
                    (Nullable<Guid> v) => v.HasValue ? (Nullable<Guid>)(Guid)v : default(Nullable<Guid>)),
                keyComparer: new ValueComparer<Guid?>(
                    (Nullable<Guid> v1, Nullable<Guid> v2) => v1.HasValue && v2.HasValue && (Guid)v1 == (Guid)v2 || !v1.HasValue && !v2.HasValue,
                    (Nullable<Guid> v) => v.HasValue ? ((Guid)v).GetHashCode() : 0,
                    (Nullable<Guid> v) => v.HasValue ? (Nullable<Guid>)(Guid)v : default(Nullable<Guid>)),
                providerValueComparer: new ValueComparer<Guid?>(
                    (Nullable<Guid> v1, Nullable<Guid> v2) => v1.HasValue && v2.HasValue && (Guid)v1 == (Guid)v2 || !v1.HasValue && !v2.HasValue,
                    (Nullable<Guid> v) => v.HasValue ? ((Guid)v).GetHashCode() : 0,
                    (Nullable<Guid> v) => v.HasValue ? (Nullable<Guid>)(Guid)v : default(Nullable<Guid>)),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "uuid"));
            categoryId.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
            categoryId.AddAnnotation("Relational:ColumnName", "category_id");

            var createdDate = runtimeEntityType.AddProperty(
                "CreatedDate",
                typeof(DateTime),
                propertyInfo: typeof(EntityBase).GetProperty("CreatedDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EntityBase).GetField("<CreatedDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            createdDate.TypeMapping = NpgsqlTimestampTzTypeMapping.Default.Clone(
                comparer: new ValueComparer<DateTime>(
                    (DateTime v1, DateTime v2) => v1.Equals(v2),
                    (DateTime v) => v.GetHashCode(),
                    (DateTime v) => v),
                keyComparer: new ValueComparer<DateTime>(
                    (DateTime v1, DateTime v2) => v1.Equals(v2),
                    (DateTime v) => v.GetHashCode(),
                    (DateTime v) => v),
                providerValueComparer: new ValueComparer<DateTime>(
                    (DateTime v1, DateTime v2) => v1.Equals(v2),
                    (DateTime v) => v.GetHashCode(),
                    (DateTime v) => v));
            createdDate.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
            createdDate.AddAnnotation("Relational:ColumnName", "created_date");
            createdDate.AddAnnotation("Relational:DefaultValue", new DateTime(2024, 9, 13, 17, 15, 38, 422, DateTimeKind.Utc).AddTicks(1697));

            var description = runtimeEntityType.AddProperty(
                "Description",
                typeof(string),
                propertyInfo: typeof(Book).GetProperty("Description", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Book).GetField("<Description>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 500);
            description.TypeMapping = NpgsqlStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "character varying(500)",
                    size: 500));
            description.TypeMapping = ((NpgsqlStringTypeMapping)description.TypeMapping).Clone(npgsqlDbType: NpgsqlTypes.NpgsqlDbType.Varchar);
        description.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
        description.AddAnnotation("Relational:ColumnName", "description");

        var embedding = runtimeEntityType.AddProperty(
            "Embedding",
            typeof(Vector),
            propertyInfo: typeof(Book).GetProperty("Embedding", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            fieldInfo: typeof(Book).GetField("<Embedding>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            nullable: true);
        embedding.TypeMapping = VectorTypeMapping.Default.Clone(
            comparer: new ValueComparer<Vector>(
                (Vector v1, Vector v2) => v1 == null && v2 == null || v1 != null && v2 != null && v1.Equals(v2),
                (Vector v) => v.GetHashCode(),
                (Vector v) => v),
            keyComparer: new ValueComparer<Vector>(
                (Vector v1, Vector v2) => v1 == null && v2 == null || v1 != null && v2 != null && v1.Equals(v2),
                (Vector v) => v.GetHashCode(),
                (Vector v) => v),
            providerValueComparer: new ValueComparer<Vector>(
                (Vector v1, Vector v2) => v1 == null && v2 == null || v1 != null && v2 != null && v1.Equals(v2),
                (Vector v) => v.GetHashCode(),
                (Vector v) => v),
            mappingInfo: new RelationalTypeMappingInfo(
                storeTypeName: "vector(384)"));
        embedding.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
        embedding.AddAnnotation("Relational:ColumnName", "embedding");
        embedding.AddAnnotation("Relational:ColumnType", "vector(384)");

        var imageUrl = runtimeEntityType.AddProperty(
            "ImageUrl",
            typeof(string),
            propertyInfo: typeof(Book).GetProperty("ImageUrl", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            fieldInfo: typeof(Book).GetField("<ImageUrl>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            nullable: true,
            maxLength: 500);
        imageUrl.TypeMapping = NpgsqlStringTypeMapping.Default.Clone(
            comparer: new ValueComparer<string>(
                (string v1, string v2) => v1 == v2,
                (string v) => v.GetHashCode(),
                (string v) => v),
            keyComparer: new ValueComparer<string>(
                (string v1, string v2) => v1 == v2,
                (string v) => v.GetHashCode(),
                (string v) => v),
            providerValueComparer: new ValueComparer<string>(
                (string v1, string v2) => v1 == v2,
                (string v) => v.GetHashCode(),
                (string v) => v),
            mappingInfo: new RelationalTypeMappingInfo(
                storeTypeName: "character varying(500)",
                size: 500));
        imageUrl.TypeMapping = ((NpgsqlStringTypeMapping)imageUrl.TypeMapping).Clone(npgsqlDbType: NpgsqlTypes.NpgsqlDbType.Varchar);
    imageUrl.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
    imageUrl.AddAnnotation("Relational:ColumnName", "image_url");

    var isDeleted = runtimeEntityType.AddProperty(
        "IsDeleted",
        typeof(bool),
        propertyInfo: typeof(Book).GetProperty("IsDeleted", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        fieldInfo: typeof(Book).GetField("<IsDeleted>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        sentinel: false);
    isDeleted.TypeMapping = NpgsqlBoolTypeMapping.Default.Clone(
        comparer: new ValueComparer<bool>(
            (bool v1, bool v2) => v1 == v2,
            (bool v) => v.GetHashCode(),
            (bool v) => v),
        keyComparer: new ValueComparer<bool>(
            (bool v1, bool v2) => v1 == v2,
            (bool v) => v.GetHashCode(),
            (bool v) => v),
        providerValueComparer: new ValueComparer<bool>(
            (bool v1, bool v2) => v1 == v2,
            (bool v) => v.GetHashCode(),
            (bool v) => v));
    isDeleted.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
    isDeleted.AddAnnotation("Relational:ColumnName", "is_deleted");

    var name = runtimeEntityType.AddProperty(
        "Name",
        typeof(string),
        propertyInfo: typeof(Book).GetProperty("Name", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        fieldInfo: typeof(Book).GetField("<Name>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        maxLength: 50);
    name.TypeMapping = NpgsqlStringTypeMapping.Default.Clone(
        comparer: new ValueComparer<string>(
            (string v1, string v2) => v1 == v2,
            (string v) => v.GetHashCode(),
            (string v) => v),
        keyComparer: new ValueComparer<string>(
            (string v1, string v2) => v1 == v2,
            (string v) => v.GetHashCode(),
            (string v) => v),
        providerValueComparer: new ValueComparer<string>(
            (string v1, string v2) => v1 == v2,
            (string v) => v.GetHashCode(),
            (string v) => v),
        mappingInfo: new RelationalTypeMappingInfo(
            storeTypeName: "character varying(50)",
            size: 50));
    name.TypeMapping = ((NpgsqlStringTypeMapping)name.TypeMapping).Clone(npgsqlDbType: NpgsqlTypes.NpgsqlDbType.Varchar);
name.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
name.AddAnnotation("Relational:ColumnName", "name");

var publisherId = runtimeEntityType.AddProperty(
    "PublisherId",
    typeof(Guid?),
    propertyInfo: typeof(Book).GetProperty("PublisherId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(Book).GetField("<PublisherId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    nullable: true);
publisherId.TypeMapping = GuidTypeMapping.Default.Clone(
    comparer: new ValueComparer<Guid?>(
        (Nullable<Guid> v1, Nullable<Guid> v2) => v1.HasValue && v2.HasValue && (Guid)v1 == (Guid)v2 || !v1.HasValue && !v2.HasValue,
        (Nullable<Guid> v) => v.HasValue ? ((Guid)v).GetHashCode() : 0,
        (Nullable<Guid> v) => v.HasValue ? (Nullable<Guid>)(Guid)v : default(Nullable<Guid>)),
    keyComparer: new ValueComparer<Guid?>(
        (Nullable<Guid> v1, Nullable<Guid> v2) => v1.HasValue && v2.HasValue && (Guid)v1 == (Guid)v2 || !v1.HasValue && !v2.HasValue,
        (Nullable<Guid> v) => v.HasValue ? ((Guid)v).GetHashCode() : 0,
        (Nullable<Guid> v) => v.HasValue ? (Nullable<Guid>)(Guid)v : default(Nullable<Guid>)),
    providerValueComparer: new ValueComparer<Guid?>(
        (Nullable<Guid> v1, Nullable<Guid> v2) => v1.HasValue && v2.HasValue && (Guid)v1 == (Guid)v2 || !v1.HasValue && !v2.HasValue,
        (Nullable<Guid> v) => v.HasValue ? ((Guid)v).GetHashCode() : 0,
        (Nullable<Guid> v) => v.HasValue ? (Nullable<Guid>)(Guid)v : default(Nullable<Guid>)),
    mappingInfo: new RelationalTypeMappingInfo(
        storeTypeName: "uuid"));
publisherId.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
publisherId.AddAnnotation("Relational:ColumnName", "publisher_id");

var status = runtimeEntityType.AddProperty(
    "Status",
    typeof(Status),
    propertyInfo: typeof(Book).GetProperty("Status", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(Book).GetField("<Status>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
status.TypeMapping = ByteTypeMapping.Default.Clone(
    comparer: new ValueComparer<Status>(
        (Status v1, Status v2) => object.Equals((object)v1, (object)v2),
        (Status v) => v.GetHashCode(),
        (Status v) => v),
    keyComparer: new ValueComparer<Status>(
        (Status v1, Status v2) => object.Equals((object)v1, (object)v2),
        (Status v) => v.GetHashCode(),
        (Status v) => v),
    providerValueComparer: new ValueComparer<byte>(
        (byte v1, byte v2) => v1 == v2,
        (byte v) => (int)v,
        (byte v) => v),
    mappingInfo: new RelationalTypeMappingInfo(
        storeTypeName: "smallint"),
    converter: new ValueConverter<Status, byte>(
        (Status value) => (byte)value,
        (byte value) => (Status)value),
    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<Status, byte>(
        JsonByteReaderWriter.Instance,
        new ValueConverter<Status, byte>(
            (Status value) => (byte)value,
            (byte value) => (Status)value)));
status.SetSentinelFromProviderValue((byte)0);
status.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
status.AddAnnotation("Relational:ColumnName", "status");

var totalReviews = runtimeEntityType.AddProperty(
    "TotalReviews",
    typeof(int),
    propertyInfo: typeof(Book).GetProperty("TotalReviews", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(Book).GetField("<TotalReviews>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    valueGenerated: ValueGenerated.OnAdd,
    sentinel: 0);
totalReviews.TypeMapping = IntTypeMapping.Default.Clone(
    comparer: new ValueComparer<int>(
        (int v1, int v2) => v1 == v2,
        (int v) => v,
        (int v) => v),
    keyComparer: new ValueComparer<int>(
        (int v1, int v2) => v1 == v2,
        (int v) => v,
        (int v) => v),
    providerValueComparer: new ValueComparer<int>(
        (int v1, int v2) => v1 == v2,
        (int v) => v,
        (int v) => v),
    mappingInfo: new RelationalTypeMappingInfo(
        storeTypeName: "integer"));
totalReviews.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
totalReviews.AddAnnotation("Relational:ColumnName", "total_reviews");
totalReviews.AddAnnotation("Relational:DefaultValue", 0);

var updateDate = runtimeEntityType.AddProperty(
    "UpdateDate",
    typeof(DateTime?),
    propertyInfo: typeof(EntityBase).GetProperty("UpdateDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(EntityBase).GetField("<UpdateDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    nullable: true,
    valueGenerated: ValueGenerated.OnAdd);
updateDate.TypeMapping = NpgsqlTimestampTzTypeMapping.Default.Clone(
    comparer: new ValueComparer<DateTime?>(
        (Nullable<DateTime> v1, Nullable<DateTime> v2) => v1.HasValue && v2.HasValue && (DateTime)v1 == (DateTime)v2 || !v1.HasValue && !v2.HasValue,
        (Nullable<DateTime> v) => v.HasValue ? ((DateTime)v).GetHashCode() : 0,
        (Nullable<DateTime> v) => v.HasValue ? (Nullable<DateTime>)(DateTime)v : default(Nullable<DateTime>)),
    keyComparer: new ValueComparer<DateTime?>(
        (Nullable<DateTime> v1, Nullable<DateTime> v2) => v1.HasValue && v2.HasValue && (DateTime)v1 == (DateTime)v2 || !v1.HasValue && !v2.HasValue,
        (Nullable<DateTime> v) => v.HasValue ? ((DateTime)v).GetHashCode() : 0,
        (Nullable<DateTime> v) => v.HasValue ? (Nullable<DateTime>)(DateTime)v : default(Nullable<DateTime>)),
    providerValueComparer: new ValueComparer<DateTime?>(
        (Nullable<DateTime> v1, Nullable<DateTime> v2) => v1.HasValue && v2.HasValue && (DateTime)v1 == (DateTime)v2 || !v1.HasValue && !v2.HasValue,
        (Nullable<DateTime> v) => v.HasValue ? ((DateTime)v).GetHashCode() : 0,
        (Nullable<DateTime> v) => v.HasValue ? (Nullable<DateTime>)(DateTime)v : default(Nullable<DateTime>)));
updateDate.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
updateDate.AddAnnotation("Relational:ColumnName", "update_date");
updateDate.AddAnnotation("Relational:DefaultValue", new DateTime(2024, 9, 13, 17, 15, 38, 422, DateTimeKind.Utc).AddTicks(1999));

var version = runtimeEntityType.AddProperty(
    "Version",
    typeof(Guid),
    propertyInfo: typeof(EntityBase).GetProperty("Version", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(EntityBase).GetField("<Version>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    concurrencyToken: true,
    sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
version.TypeMapping = GuidTypeMapping.Default.Clone(
    comparer: new ValueComparer<Guid>(
        (Guid v1, Guid v2) => v1 == v2,
        (Guid v) => v.GetHashCode(),
        (Guid v) => v),
    keyComparer: new ValueComparer<Guid>(
        (Guid v1, Guid v2) => v1 == v2,
        (Guid v) => v.GetHashCode(),
        (Guid v) => v),
    providerValueComparer: new ValueComparer<Guid>(
        (Guid v1, Guid v2) => v1 == v2,
        (Guid v) => v.GetHashCode(),
        (Guid v) => v),
    mappingInfo: new RelationalTypeMappingInfo(
        storeTypeName: "uuid"));
version.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
version.AddAnnotation("Relational:ColumnName", "version");

var key = runtimeEntityType.AddKey(
    new[] { id });
runtimeEntityType.SetPrimaryKey(key);
key.AddAnnotation("Relational:Name", "pk_books");

var index = runtimeEntityType.AddIndex(
    new[] { categoryId });
index.AddAnnotation("Relational:Name", "ix_books_category_id");

var index0 = runtimeEntityType.AddIndex(
    new[] { publisherId });
index0.AddAnnotation("Relational:Name", "ix_books_publisher_id");

return runtimeEntityType;
}

public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
{
    var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CategoryId") },
        principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
        principalEntityType,
        deleteBehavior: DeleteBehavior.SetNull);

    var category = declaringEntityType.AddNavigation("Category",
        runtimeForeignKey,
        onDependent: true,
        typeof(Category),
        propertyInfo: typeof(Book).GetProperty("Category", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        fieldInfo: typeof(Book).GetField("<Category>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        eagerLoaded: true);

    runtimeForeignKey.AddAnnotation("Relational:Name", "fk_books_categories_category_id");
    return runtimeForeignKey;
}

public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
{
    var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PublisherId") },
        principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
        principalEntityType,
        deleteBehavior: DeleteBehavior.SetNull);

    var publisher = declaringEntityType.AddNavigation("Publisher",
        runtimeForeignKey,
        onDependent: true,
        typeof(Publisher),
        propertyInfo: typeof(Book).GetProperty("Publisher", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        fieldInfo: typeof(Book).GetField("<Publisher>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        eagerLoaded: true);

    runtimeForeignKey.AddAnnotation("Relational:Name", "fk_books_publishers_publisher_id");
    return runtimeForeignKey;
}

public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
{
    runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
    runtimeEntityType.AddAnnotation("Relational:Schema", null);
    runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
    runtimeEntityType.AddAnnotation("Relational:TableName", "books");
    runtimeEntityType.AddAnnotation("Relational:ViewName", null);
    runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

    Customize(runtimeEntityType);
}

static partial void Customize(RuntimeEntityType runtimeEntityType);
}
}
