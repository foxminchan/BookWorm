---
openapi: 3.1.1
info:
  title: Rating Service API
  description: Handles the collection, storage, and aggregation of user feedback and
    ratings for books on the BookWorm platform
  contact:
    name: Nhan Nguyen
    url: https://github.com/foxminchan
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: '1.0'
servers:
  - url: https://dev.rating.bookworm.com
    description: Development
  - url: https://stg.rating.bookworm.com
    description: Staging
  - url: https://qa.rating.bookworm.com
    description: QA
  - url: https://rating.bookworm.com
    description: Production
paths:
  "/api/v1/feedbacks":
    get:
      tags:
      - Feedback
      summary: List Feedbacks
      description: List feedbacks for a book with pagination and filtering
      x-eventcatalog-message-type: query
      operationId: ListFeedbacksEndpoint
      parameters:
      - name: BookId
        in: query
        description: The ID of the book to get feedback for
        required: true
        schema:
          type: string
          format: uuid
          description: The unique identifier of the book
          example: "01961eb4-668d-7e7e-ae25-0fab379614f7"
      - name: PageIndex
        in: query
        description: Number of items to return in a single page of results
        schema:
          type: integer
          format: int32
          default: 1
          description: The page index to return
          minimum: 1
          example: 1
      - name: PageSize
        in: query
        description: Number of items to return in a single page of results
        schema:
          type: integer
          format: int32
          default: 20
          description: The page size to return
          minimum: 1
          example: 20
      - name: OrderBy
        in: query
        description: Property to order results by
        schema:
          type: string
          default: Rating
          description: The property to order results by
          example: Rating
      - name: IsDescending
        in: query
        description: Whether to order results in descending order
        schema:
          type: boolean
          default: false
          description: Whether to order results in descending order
          example: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PagedResultOfFeedbackDto"
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                "$ref": "#/components/schemas/HttpValidationProblemDetails"
    post:
      tags:
      - Feedback
      summary: Create Feedback
      description: Create a new feedback
      x-eventcatalog-message-type: command
      operationId: CreateFeedbackEndpoint
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateFeedbackCommand"
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                format: uuid
                description: The unique identifier of the feedback
                example: "01961eb4-668d-7e7e-ae25-0fab379614f7"
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                "$ref": "#/components/schemas/HttpValidationProblemDetails"
  "/api/v1/feedbacks/{id}":
    delete:
      tags:
      - Feedback
      summary: Delete Feedback
      description: Delete a feedback if it exists
      x-eventcatalog-message-type: command
      operationId: DeleteFeedbackEndpoint
      security:
        - BearerAuth: []
      parameters:
      - name: id
        in: path
        description: The unique identifier of the feedback to be deleted
        required: true
        schema:
          type: string
          format: uuid
          description: The unique identifier of the feedback to be deleted
          example: "01961eb4-668d-7e7e-ae25-0fab379614f7"
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
components:
  schemas:
    CreateFeedbackCommand:
      required:
      - bookId
      - firstName
      - lastName
      - rating
      type: object
      writeOnly: true
      description: The command to create a new feedback
      properties:
        bookId:
          type: string
          format: uuid
          description: The unique identifier of the book
          example: "01961eb4-668d-7e7e-ae25-0fab379614f7"
        firstName:
          type: string
          nullable: true
          description: The first name of the user
          maxLength: 50
          example: "John"
        lastName:
          type: string
          description: The last name of the user
          maxLength: 50
          example: "Doe"
        comment:
          type:
            - "string"
            - "null"
          description: The comment of the user
          maxLength: 1000
          example: "This is a comment"
        rating:
          type: integer
          format: int32
          description: The rating of the user
          minimum: 1
          maximum: 5
          example: 5
    FeedbackDto:
      type: object
      readOnly: true
      description: The feedback of the user
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier of the feedback
          example: "01961eb4-668d-7e7e-ae25-0fab379614f7"
        firstName:
          type: string
          description: The first name of the user
          example: "John"
        lastName:
          type: string
          description: The last name of the user
          example: "Doe"
        comment:
          type:
            - "string"
            - "null"
          description: The comment of the user
          example: "This is a comment"
        rating:
          type: integer
          format: int32
          description: The rating of the user
          example: 5
        bookId:
          type: string
          format: uuid
          description: The unique identifier of the book
          example: "01961eb4-668d-7e7e-ae25-0fab379614f7"
    HttpValidationProblemDetails:
      type: object
      readOnly: true
      description: The problem details for validation errors
      properties:
        type:
          type: string
          description: The type of the problem
          example: "https://tools.ietf.org/html/rfc9110#section-15.5.1"
        title:
          type: string
          description: The title of the problem
          example: "Validation failed"
        status:
          type: integer
          format: int32
          description: The status code of the problem
          example: 400
        detail:
          type: string
          description: The detail of the problem
          example: "One or more validation errors has occurred"
        errors:
          type: array
          description: The validation errors
          items:
            type: object
            properties:
              propertyName:
                type: string
                description: The name of the property that failed validation
                example: "FirstName"
              errorMessage:
                type: string
                description: The error message describing the validation failure
                example: "'FirstName' must not be empty."
              attemptedValue:
                type: object
                description: The value that was attempted
                example: null
              customState:
                type: object
                description: Custom state information
                example: null
              severity:
                type: integer
                format: int32
                description: The severity level of the error
                example: 0
              errorCode:
                type:
                  - "string"
                  - "null"
                description: The error code
                example: null
              formattedMessagePlaceholderValues:
                type: object
                description: Placeholder values for the formatted message
                example: null
    PagedResultOfFeedbackDto:
      type: object
      readOnly: true
      description: The paged result of the feedback
      properties:
        items:
          type: array
          items:
            "$ref": "#/components/schemas/FeedbackDto"
        pageIndex:
          type: integer
          format: int32
          description: The page index
          example: 1
        pageSize:
          type: integer
          format: int32
          description: The page size
          example: 20
        totalItems:
          type: integer
          format: int64
          description: The total number of items
          example: 100
        totalPages:
          type: number
          format: double
          description: The total number of pages
          example: 5
        hasPreviousPage:
          type: boolean
          description: Whether there is a previous page
          example: true
        hasNextPage:
          type: boolean
          description: Whether there is a next page
          example: true
    ProblemDetails:
      type: object
      readOnly: true
      description: The problem details
      properties:
        type:
          type: string
          description: The type of the problem
        title:
          type: string
          description: The title of the problem
        status:
          type: integer
          format: int32
          description: The status code of the problem
        detail:
          type: string
          description: The detail of the problem
  securitySchemes:
    BearerAuth:
      type: http
      scheme: Bearer
      description: The Bearer token for the user
tags:
- name: Feedback
  description: Endpoints for managing user ratings and feedback for books on the BookWorm platform
